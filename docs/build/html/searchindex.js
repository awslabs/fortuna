Search.setIndex({"docnames": ["examples/bring_in_your_own", "examples/examples", "examples/mnist_classification", "examples/save_restore_checkpoints", "examples/sinusoidal_regression", "examples/tabular_regressions", "examples/two_moons_classification", "index", "installation", "license", "quickstart", "readme_link", "references/calib_config", "references/calib_model/calib_model", "references/calib_model/predictive", "references/conformer", "references/data_loader", "references/metric", "references/model/builtin_models", "references/model/cnn", "references/model/linen_module", "references/model/mlp", "references/model/model", "references/model/model_manager", "references/model/resnet", "references/model/wideresnet", "references/output_calibrator", "references/plot", "references/prob_model/fit_config", "references/prob_model/joint", "references/prob_model/likelihood", "references/prob_model/posterior/advi", "references/prob_model/posterior/deep_ensemble", "references/prob_model/posterior/laplace", "references/prob_model/posterior/map", "references/prob_model/posterior/posterior", "references/prob_model/posterior/swag", "references/prob_model/predictive", "references/prob_model/prior", "references/prob_model/prob_model", "references/prob_output_layer", "references/references", "references/typing", "references/utils", "usage_modes/flax_models", "usage_modes/model_outputs", "usage_modes/uncertainty_estimates", "usage_modes/usage_modes"], "filenames": ["examples/bring_in_your_own.nblink", "examples/examples.rst", "examples/mnist_classification.nblink", "examples/save_restore_checkpoints.rst", "examples/sinusoidal_regression.nblink", "examples/tabular_regressions.nblink", "examples/two_moons_classification.nblink", "index.rst", "installation.rst", "license.rst", "quickstart.rst", "readme_link.rst", "references/calib_config.rst", "references/calib_model/calib_model.rst", "references/calib_model/predictive.rst", "references/conformer.rst", "references/data_loader.rst", "references/metric.rst", "references/model/builtin_models.rst", "references/model/cnn.rst", "references/model/linen_module.rst", "references/model/mlp.rst", "references/model/model.rst", "references/model/model_manager.rst", "references/model/resnet.rst", "references/model/wideresnet.rst", "references/output_calibrator.rst", "references/plot.rst", "references/prob_model/fit_config.rst", "references/prob_model/joint.rst", "references/prob_model/likelihood.rst", "references/prob_model/posterior/advi.rst", "references/prob_model/posterior/deep_ensemble.rst", "references/prob_model/posterior/laplace.rst", "references/prob_model/posterior/map.rst", "references/prob_model/posterior/posterior.rst", "references/prob_model/posterior/swag.rst", "references/prob_model/predictive.rst", "references/prob_model/prior.rst", "references/prob_model/prob_model.rst", "references/prob_output_layer.rst", "references/references.rst", "references/typing.rst", "references/utils.rst", "usage_modes/flax_models.rst", "usage_modes/model_outputs.rst", "usage_modes/uncertainty_estimates.rst", "usage_modes/usage_modes.rst"], "titles": ["Bring in your own objects", "Examples", "MNIST Classification", "Save and load checkpoints", "Sinusoidal regression", "Tabular regressions", "Two-moons Classification", "Fortuna", "Installation", "License", "Quickstart", "&lt;no title&gt;", "Calibration configuration", "Calibration model", "Predictive distribution", "Conformer", "Data loader", "Metric", "Built-in models", "CNN", "Flax Linen Module", "Multi-Layer Perceptron (MLP)", "Model", "Model manager", "ResNet", "WideResNet", "Output calibrator", "Plot", "Posterior fitting configuration", "Joint distribution", "Likelihood function", "Automatic Differentiation Variational Inference (ADVI)", "Deep Ensemble", "Laplace approximation", "Maximum-A-Posteriori (MAP)", "Posterior", "SWAG", "Predictive distribution", "Prior distribution", "Probabilistic model", "Probabilistic output layer", "API References", "Typing", "Utils", "From Flax models", "From model outputs", "From uncertainty estimates", "Usage modes"], "terms": {"proper": 7, "estim": [1, 5, 7, 10, 14, 15, 17, 30, 37, 40, 47], "predict": [1, 3, 5, 7, 10, 13, 15, 17, 39, 40, 44, 45], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46], "fundament": 7, "applic": 7, "involv": [7, 28, 39], "critic": 7, "decis": 7, "It": [7, 12, 13, 14, 23, 26, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40, 44], "can": [0, 2, 3, 4, 6, 7, 10, 14, 16, 17, 20, 22, 26, 38, 40, 44, 45, 46], "us": [0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 20, 23, 27, 28, 29, 30, 31, 37, 44, 45, 46], "assess": [4, 7], "reliabl": [7, 17, 27, 44], "model": [1, 5, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 29, 30, 32, 33, 35, 37, 40, 41, 43, 46, 47], "trigger": [7, 12, 28], "human": 7, "intervent": 7, "decid": [7, 12, 28], "whether": [3, 7, 14, 16, 17, 23, 27, 28, 29, 30, 37], "safe": 7, "deploi": 7, "wild": 7, "provid": [4, 7, 10, 13, 15, 28, 39, 45, 46], "calibr": [1, 3, 5, 7, 10, 14, 15, 17, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 44, 46], "classif": [0, 1, 7, 10, 13, 14, 15, 17, 23, 26, 30, 37, 39, 40], "regress": [0, 1, 7, 10, 13, 14, 15, 17, 23, 26, 30, 37, 39, 40], "design": 7, "easi": 7, "promot": 7, "effortless": 7, "product": 7, "system": 7, "offer": [5, 7, 10, 46], "sever": [2, 3, 4, 5, 6, 7, 10, 12, 18, 22, 28, 35, 44], "usag": [7, 10, 20], "mode": [2, 6, 7, 10, 14, 30, 37, 40, 44, 45], "Their": [7, 10], "pipelin": [7, 10], "depict": [7, 10], "figur": [4, 5, 6, 7, 10, 27], "below": [0, 7, 10, 13, 14, 29, 30, 37, 38, 39, 40, 43, 44], "": [0, 2, 4, 6, 7, 10, 14, 16, 17, 30, 36, 37, 39, 42, 44, 45, 47], "you": [0, 2, 3, 4, 6, 7, 10, 16, 20, 22, 26, 38, 44, 45, 46], "start": [0, 1, 3, 5, 7, 10, 15, 40, 44, 45, 46], "your": [1, 3, 7, 10, 16, 17, 20, 22, 26, 38, 44, 45, 46], "journei": [7, 10], "from": [0, 1, 3, 7, 10, 13, 14, 15, 16, 20, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 47], "ani": [0, 5, 7, 10, 19, 24, 25, 26, 28, 31, 33, 34, 35, 36, 39, 42, 45], "green": [7, 10], "panel": [7, 10], "might": [3, 7, 10, 12, 28, 46], "prefer": [7, 10], "one": [0, 2, 4, 6, 7, 10, 14, 15, 17, 23, 30, 37, 39, 40, 44], "other": [2, 3, 4, 6, 7, 10, 16, 39, 44, 45], "accord": [7, 10, 46], "own": [1, 7, 10, 17, 22, 26, 38, 44], "requir": [2, 4, 6, 7, 10, 36, 44, 45, 46], "ha": [3, 7, 10], "minim": [3, 7, 10, 44], "compat": [1, 7, 10, 13, 17, 32, 35, 39, 44, 45], "quickest": [7, 10], "level": [7, 10, 14, 15, 37, 40, 46], "interact": [7, 10], "howev": [0, 7, 10, 44], "ar": [0, 2, 4, 5, 7, 10, 13, 15, 16, 17, 20, 28, 29, 30, 35, 37, 39, 44, 45, 46], "inaccur": [7, 10], "conform": [1, 5, 7, 10, 41], "set": [0, 1, 7, 10, 14, 15, 28, 35, 37, 39, 46], "larg": [7, 10, 46], "unus": [7, 10], "output": [1, 5, 7, 10, 13, 14, 15, 19, 21, 22, 23, 24, 25, 29, 30, 37, 39, 41, 44, 47], "also": [0, 2, 4, 6, 7, 10, 16, 23, 27, 29, 30, 44, 46], "pre": [0, 2, 7, 10, 29, 30, 37, 44], "train": [1, 5, 7, 10, 12, 13, 23, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 45, 46], "better": [7, 10, 29, 44], "control": [7, 10], "make": [0, 3, 7, 10, 44, 46], "sure": [7, 10], "have": [2, 3, 4, 6, 7, 10, 14, 15, 44, 45, 46], "been": [2, 7, 10, 14, 45], "appropri": [7, 10, 16], "flax": [0, 4, 6, 7, 10, 13, 19, 21, 22, 24, 25, 26, 46, 47], "higher": [7, 10], "enabl": [7, 10, 44], "replac": [7, 10], "standard": [4, 7, 10, 14, 15, 30, 31, 33, 36, 37, 39, 40, 46], "scalabl": [7, 10, 44], "bayesian": [7, 10, 44], "infer": [6, 7, 10, 35, 44], "procedur": [7, 10], "further": [7, 10, 46], "improv": [4, 7, 10, 28], "The": [3, 4, 5, 7, 10, 13, 14, 15, 16, 17, 19, 21, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45], "next": [7, 10, 16], "paragraph": [7, 10], "more": [2, 3, 7, 10, 20, 46], "detail": [7, 10], "about": [0, 5, 7, 10, 13, 39], "each": [1, 2, 6, 7, 10, 14, 15, 16, 17, 21, 23, 24, 27, 30, 37, 39, 40, 44, 45, 46], "bring": [1, 7, 10, 17, 22, 26, 38, 44, 45], "data": [1, 3, 7, 10, 14, 15, 17, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 46], "rigor": [7, 10, 15, 46], "e": [2, 4, 6, 7, 10, 15, 16, 28, 30, 37, 44, 45, 46], "certain": [7, 10, 44, 45, 46], "probabl": [2, 5, 6, 7, 10, 14, 15, 17, 23, 29, 30, 37, 38, 39, 40, 44, 45], "exampl": [0, 2, 3, 4, 6, 7, 10, 14, 37, 40, 44, 45], "suppos": [3, 7, 10, 45, 46], "want": [3, 7, 10], "credibl": [4, 5, 7, 10, 14, 37, 40, 44, 45], "interv": [1, 2, 5, 7, 10, 14, 15, 17, 37, 40], "coverag": [2, 5, 7, 10, 15, 17, 44, 45], "error": [2, 4, 5, 6, 7, 10, 14, 15, 17, 37, 40, 44, 45, 46], "correspond": [7, 10, 14, 15, 17, 23, 27, 29, 30, 37, 38, 39, 40, 44, 45, 46], "differ": [7, 10, 16, 17, 30, 37, 40, 44], "test": [0, 2, 4, 6, 7, 10, 15, 44, 45, 46], "input": [2, 4, 6, 7, 10, 15, 16, 22, 23, 29, 30, 31, 36, 37, 39, 44, 45, 46], "variabl": [0, 2, 4, 6, 7, 10, 13, 14, 15, 16, 17, 23, 29, 30, 36, 37, 39, 40, 44, 45, 46], "we": [0, 1, 5, 7, 10, 13, 14, 15, 17, 18, 23, 26, 29, 30, 35, 37, 38, 39, 40, 44, 45, 46], "assum": [2, 4, 6, 7, 10, 30, 31, 44, 46], "pass": [0, 5, 7, 10, 13, 14, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "arrai": [0, 2, 4, 5, 6, 7, 10, 13, 14, 15, 16, 17, 21, 23, 27, 31, 33, 34, 36, 37, 40, 42, 44, 45, 46], "lower": [4, 7, 10, 15, 17, 46], "upper": [7, 10, 15, 17, 46], "bound": [7, 10, 15, 17, 46], "respect": [7, 10, 14, 16, 40, 44, 45, 46], "test_lower_bound": [4, 5, 7, 10, 15, 44, 45, 46], "test_upper_bound": [4, 5, 7, 10, 15, 44, 45, 46], "comput": [1, 5, 7, 10, 12, 14, 15, 17, 28, 29, 30, 37, 46], "valid": [2, 3, 4, 6, 7, 10, 15, 28, 31, 32, 33, 34, 35, 36, 39, 45, 46], "val_lower_bound": [4, 5, 7, 10, 15, 44, 45, 46], "val_upper_bound": [4, 5, 7, 10, 15, 44, 45, 46], "target": [2, 4, 5, 6, 7, 10, 13, 14, 15, 16, 17, 23, 29, 30, 37, 39, 40, 44, 45, 46], "denot": [7, 10, 29, 30, 37, 39, 40, 44, 45], "val_target": [2, 4, 5, 6, 7, 10, 15, 44, 45, 46], "follow": [3, 4, 5, 7, 10, 46], "code": [0, 3, 7, 10, 44, 46], "produc": [2, 7, 10, 37], "version": [7, 10, 30, 46], "refer": [3, 7, 10, 13, 14, 19, 29, 30, 35, 37, 38, 39, 40, 43, 44, 45, 46], "conformal_interv": [4, 5, 7, 10, 15, 44, 45, 46], "import": [0, 2, 4, 5, 6, 7, 10, 20, 44, 45, 46], "quantileconformalregressor": [4, 5, 7, 10, 15, 44, 45, 46], "val_output": [2, 4, 6, 7, 10, 45], "test_output": [2, 4, 6, 7, 10, 45], "furthermor": [2, 4, 6, 7, 10], "some": [0, 1, 2, 3, 4, 6, 7, 10, 15, 17, 30, 44, 45, 46, 47], "test_target": [2, 4, 6, 7, 10, 44, 45], "get": [0, 2, 4, 6, 7, 10, 43, 44], "metric": [1, 5, 7, 10, 28, 31, 32, 33, 34, 35, 36, 41], "calibclassifi": [2, 6, 7, 10, 13, 45], "mean": [0, 2, 4, 5, 6, 7, 10, 14, 17, 23, 30, 36, 37, 39, 40, 44, 45], "accuraci": [2, 6, 7, 10, 17, 27, 44, 45], "expected_calibration_error": [2, 6, 7, 10, 17, 44, 45], "conformal_set": [2, 7, 10, 15, 44, 45, 46], "defin": [5, 7, 10, 12, 20, 28, 31, 32, 33, 34, 36, 37, 39, 45], "calib_model": [0, 2, 4, 6, 7, 10, 13, 14, 45], "statu": [2, 3, 4, 6, 7, 10, 13, 31, 32, 33, 34, 35, 36, 39, 42, 44, 45], "test_mean": [2, 4, 5, 6, 7, 10, 44, 45], "test_mod": [2, 6, 7, 10, 44, 45], "acc": [2, 6, 7, 10, 27, 44, 45], "pred": [2, 4, 6, 7, 10, 17, 44, 45], "ec": [2, 6, 7, 10, 17, 44, 45], "prob": [0, 2, 6, 7, 10, 17, 44, 45], "adaptivepredictionconformalclassifi": [2, 7, 10, 15, 44, 45, 46], "val_mean": [2, 4, 7, 10, 45], "val_prob": [2, 7, 10, 15, 44, 45, 46], "test_prob": [2, 7, 10, 15, 44, 45, 46], "deep": [4, 7, 10, 24, 35, 44], "learn": [1, 5, 7, 10, 44], "written": [7, 10, 45], "power": [5, 7, 10, 44], "jax": [0, 7, 10, 16, 19, 21, 24, 25, 44, 45], "doe": [5, 7, 10], "logit": [7, 10, 13, 23, 26, 39, 40, 44], "dimens": [5, 7, 10, 15, 16, 17, 19, 21, 23, 24, 25, 39, 44], "given": [2, 3, 4, 6, 7, 10, 13, 14, 16, 17, 27, 29, 30, 35, 37, 38, 39, 40, 44, 45, 46], "output_dim": [2, 4, 5, 6, 7, 10, 19, 21, 24, 25, 44], "tensorflow": [1, 7, 10, 16, 44], "loader": [1, 3, 7, 10, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41], "train_data_load": [2, 3, 4, 5, 6, 7, 10, 31, 32, 33, 34, 35, 36, 39, 44], "val_data_load": [2, 4, 5, 6, 7, 10, 31, 32, 33, 34, 35, 36, 39], "test_data_load": [2, 4, 5, 6, 7, 10, 44], "from_tensorflow_data_load": [2, 7, 10, 16], "probclassifi": [0, 2, 6, 7, 10, 39, 44], "convert": [1, 7, 10, 16, 31, 33, 36, 44], "dataload": [2, 4, 5, 6, 7, 10, 16, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 44], "calib_data_load": [2, 4, 5, 6, 7, 10, 39, 44], "probabilist": [0, 1, 5, 7, 10, 12, 13, 14, 23, 29, 30, 32, 33, 35, 37, 41, 43, 45], "prob_model": [0, 2, 3, 4, 5, 6, 7, 10, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44], "inputs_load": [2, 4, 5, 6, 7, 10, 16, 30, 31, 36, 37, 44], "to_inputs_load": [2, 4, 5, 6, 7, 10, 16, 44], "to_array_target": [2, 4, 5, 6, 7, 10, 16, 44], "wip": [7, 8], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47], "project": [7, 9], "under": [7, 9], "apach": [7, 9], "2": [0, 2, 4, 5, 6, 7, 9, 23, 24, 28, 36, 39, 40, 45], "0": [0, 2, 4, 5, 6, 7, 9, 13, 14, 15, 20, 25, 28, 30, 31, 37, 38, 39, 40, 44, 45, 46], "when": [0, 2, 14], "construct": [0, 44, 46], "let": [0, 2, 3, 4, 6, 23, 26, 39, 44, 45, 46], "sy": [0, 2, 4, 5, 6], "path": [0, 2, 3, 4, 5, 6, 13, 28, 32, 35, 39, 42], "insert": [0, 2, 4, 5, 6], "src": [0, 2, 4, 5, 6], "As": [0, 2, 6, 44], "an": [0, 2, 3, 4, 6, 12, 13, 14, 16, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46], "show": [0, 1, 2, 4, 5, 6, 27, 44, 45, 46], "how": [0, 1, 2, 3, 4, 6, 12, 28, 31, 32, 33, 34, 36, 44, 45, 46], "arbitrari": [0, 20], "convolut": [0, 24, 25], "neural": [0, 20], "network": [0, 19, 20, 25], "cnn": [0, 18], "linen": [0, 4, 6, 19, 21, 22, 24, 25, 26], "nn": [0, 4, 6, 13, 20, 23, 39], "class": [0, 5, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43], "modul": [0, 13, 19, 21, 22, 23, 24, 25, 26, 39], "compact": [0, 20], "def": [0, 2, 4, 5, 20], "__call__": [0, 20], "self": [0, 5, 20], "x": [0, 2, 4, 5, 20, 23, 29, 30, 37, 39, 45], "conv": [0, 24, 25], "featur": [0, 20, 24], "32": 0, "kernel_s": 0, "3": [0, 4, 5, 6, 20, 24, 28, 31], "relu": [0, 20, 21], "avg_pool": 0, "window_shap": 0, "stride": 0, "64": [0, 24], "reshap": [0, 5, 6], "shape": [0, 5, 23, 29, 31], "1": [0, 2, 4, 5, 6, 13, 14, 15, 20, 28, 30, 31, 32, 35, 37, 39, 40, 44, 45], "flatten": 0, "dens": [0, 20], "256": 0, "10": [0, 2, 4, 6, 25, 27], "log_softmax": 0, "return": [0, 2, 4, 5, 13, 14, 15, 16, 17, 20, 23, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44], "now": [0, 2, 4, 6, 44], "classifi": [0, 1, 4, 13, 39, 44, 46], "fortuna": [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47], "done": [0, 2, 4, 6, 44], "check": [0, 2, 16, 46], "work": 0, "initi": [0, 20, 23, 26, 29, 31, 33, 34, 35, 36], "its": [0, 2, 4, 6, 29, 37, 43], "paramet": [0, 12, 13, 14, 15, 16, 17, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 45], "do": [0, 3, 5, 44, 45], "forward": [0, 13, 20, 22, 23, 39], "random": [0, 4, 5, 13, 14, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44], "numpi": [0, 2, 4, 5, 6, 16, 17, 19, 24, 25, 44, 45], "jnp": [0, 14, 15, 23, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40], "zero": 0, "init": [0, 23, 26, 29, 31, 33, 34, 35, 36], "prngkei": 0, "appli": [0, 17, 23, 30, 44, 45], "multi": [0, 17, 18, 44], "dimension": [0, 15, 16, 17], "uniform": 0, "type": [0, 5, 13, 14, 15, 16, 17, 19, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44], "param": [0, 2, 23, 26, 29, 30, 31, 33, 34, 35, 36, 38, 42], "option": [0, 3, 13, 14, 15, 16, 17, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45], "util": [0, 41], "generate_rng_like_tre": 0, "flatten_util": 0, "ravel_pytre": 0, "tree_util": 0, "tree_map": 0, "_src": [0, 21, 24, 25], "prng": 0, "prngkeyarrai": [0, 14, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43], "log_prob": [0, 2, 4, 6, 14, 29, 30, 37, 38, 40, 44, 45], "float": [0, 4, 5, 14, 15, 17, 25, 27, 28, 29, 30, 31, 37, 38, 40], "v": [0, 26], "where": [0, 12, 13, 14, 16, 20, 23, 28, 29, 30, 35, 37, 38, 39, 40, 45], "inf": 0, "sampl": [0, 14, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "params_lik": [0, 38], "rng": [0, 14, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40], "none": [0, 4, 5, 13, 14, 15, 16, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "kei": [0, 5, 26, 33, 43], "lambda": [0, 2], "l": 0, "k": [0, 14, 29, 37, 38, 40], "dtype": [0, 2, 19, 24, 25, 26, 31, 33, 34, 35, 36], "In": [0, 1, 2, 3, 4, 5, 6, 30, 44, 45, 46], "just": [0, 3, 44, 45], "creat": [0, 5], "order": [0, 3, 37, 44], "call": [0, 2, 4, 6, 16, 20, 23, 28, 29, 30, 37, 43, 46], "randomnumbergener": [0, 14, 23, 29, 30, 37, 38, 40, 43], "which": [0, 2, 3, 13, 15, 17, 20, 29, 30, 33, 37, 39, 44], "automat": [0, 6, 20, 35, 43], "handl": [0, 12, 28, 43], "updat": [0, 5, 28, 36, 43], "number": [0, 13, 14, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44], "gener": [0, 1, 2, 6, 14, 16, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43], "seed": [0, 4, 5, 13, 39, 43, 44], "usual": [0, 46], "so": [0, 44], "never": [0, 44], "need": [0, 3, 13, 44, 45], "worri": 0, "But": 0, "case": [0, 20, 45], "sinc": [0, 5, 20], "deriv": [0, 16], "isol": 0, "params_in": 0, "dict": [0, 5, 17, 23, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 42], "b": [0, 4], "c": [0, 4, 5, 6], "5": [0, 5, 19, 32, 36], "params_out": 0, "print": [0, 2, 4, 6], "f": [0, 2, 4, 6, 23, 39], "log": [0, 2, 4, 5, 6, 14, 23, 28, 29, 30, 37, 38, 39, 40, 44, 45], "To": [0, 28], "probregressor": [0, 4, 5, 39, 44], "mlp": [0, 4, 5, 6, 18, 44], "mind": 0, "could": [0, 2, 44], "built": [0, 16, 22, 44], "here": [0, 3, 27], "implement": [0, 20, 44], "scratch": [0, 2], "educ": [0, 2, 4, 6], "purpos": [0, 2, 4, 6, 44, 45], "tupl": [0, 4, 5, 16, 20, 21, 23, 27, 29, 30, 31, 33, 42, 44], "int": [0, 4, 5, 13, 14, 15, 16, 19, 20, 21, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 43], "feat": 0, "regressor": [0, 1, 5, 13, 39, 44], "calibregressor": [0, 4, 13, 45], "output_calibr": [0, 2, 4, 6, 13, 26, 39], "4": [0, 4, 6, 20, 24, 27], "ones": [0, 2, 46], "section": [1, 2, 12, 16, 27, 28, 42, 47], "task": [1, 2, 4, 6, 46], "mnist": [1, 6], "download": 1, "build": [1, 5, 16], "posterior": [1, 3, 5, 31, 32, 33, 34, 36, 37, 39, 44], "fit": [1, 3, 5, 31, 32, 33, 34, 35, 36, 39, 44], "statist": [1, 5, 14, 37, 39], "what": [1, 45], "had": 1, "sinusoid": 1, "two": [1, 14, 15, 17, 28, 37, 39, 40, 44], "moon": 1, "scikit": 1, "tabular": 1, "dataset": [1, 2, 6], "uci": 1, "object": [1, 2, 3, 4, 6, 12, 13, 14, 16, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45], "prior": [1, 2, 4, 6, 29, 39, 44], "distribut": [1, 2, 4, 5, 6, 13, 28, 30, 31, 32, 33, 34, 35, 36, 39, 40, 44], "notebook": [2, 4, 5, 6], "obtain": [2, 4, 5, 6, 44, 45], "uncertainti": [2, 4, 6, 10, 15, 44, 45, 47], "last": 2, "directli": 2, "u": [2, 4, 6, 44, 45], "first": [2, 4, 6, 15, 16, 17, 30, 37, 44, 45], "sourc": [2, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43], "would": [2, 37], "equival": [2, 31], "fine": 2, "tf": 2, "tensorflow_dataset": 2, "tfd": 2, "split_rang": 2, "shuffl": [2, 4, 5, 6, 16, 44], "fals": [2, 5, 16, 17, 23, 27, 28, 29, 30, 37], "d": [2, 23, 26, 31, 33, 34, 35, 36, 37, 39], "load": [2, 5, 13, 32, 35, 39], "name": [2, 5, 19, 21, 24, 25, 26, 31, 33, 34, 36], "split": [2, 5], "as_supervis": 2, "true": [2, 4, 5, 6, 14, 17, 28, 44], "shuffle_fil": 2, "map": [2, 5, 30, 31, 33, 35, 36, 44], "y": [2, 4, 5, 14, 27, 29, 30, 37, 39, 40, 45], "cast": 2, "float32": [2, 19, 24, 25], "255": 2, "reshuffle_each_iter": 2, "batch": [2, 5, 16, 29, 30, 42], "128": [2, 4, 5, 6, 44], "prefetch": [2, 4, 5, 6, 16, 44], "80": [2, 34, 35], "90": 2, "help": [2, 4, 6], "digest": [2, 6, 16, 44], "interfac": [2, 4, 6, 44], "contain": [2, 3, 4, 6, 20, 39, 42, 44, 46], "attribut": [2, 4, 6, 14, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40], "configur": [2, 3, 4, 6, 13, 31, 32, 33, 34, 35, 36, 39, 41, 44, 45], "posterior_approxim": [2, 4, 6, 31, 32, 33, 34, 35, 36, 39], "lenet5": [2, 19], "laplac": [2, 35], "approxim": [2, 4, 5, 6, 29, 31, 32, 34, 35, 36, 37, 39, 44], "act": [2, 40], "layer": [2, 18, 19, 20, 24, 25, 30, 41, 44, 45], "default": [2, 4, 5, 6, 13, 14, 21, 37, 39, 40, 44, 45], "temperatur": [2, 4, 5, 6, 13, 26, 39, 45], "scale": [2, 4, 5, 6, 13, 26, 39, 45], "laplaceposteriorapproxim": [2, 33], "which_param": [2, 33], "output_subnet": 2, "includ": [2, 3, 4, 6, 14, 15, 27, 29, 31, 32, 33, 34, 35, 36, 37, 40, 44, 45, 46], "maximum": [2, 5, 17, 28, 35], "A": [2, 5, 13, 14, 15, 16, 17, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 43], "posteriori": [2, 5, 35], "via": [2, 39, 43, 44], "argument": [2, 29, 30, 31, 36, 37, 39], "map_fit_config": [2, 5, 33, 36], "fit_config": [2, 3, 4, 5, 6, 28, 31, 32, 33, 34, 35, 36, 39], "fitconfig": [2, 3, 4, 5, 6, 28, 31, 32, 33, 34, 35, 36, 39], "fitmonitor": [2, 4, 5, 6, 28], "monitor": [2, 4, 5, 6, 12, 28, 44], "early_stopping_pati": [2, 5, 28], "invok": [2, 3, 4, 5, 6, 14, 23, 29, 30, 37, 38, 40], "method": [2, 3, 4, 5, 6, 14, 15, 19, 20, 23, 27, 28, 29, 30, 37, 39, 44, 46], "interest": [2, 4, 6], "most": [2, 3, 4, 6, 46], "g": [2, 4, 6, 13, 15, 26, 39, 44, 45, 46], "point": [2, 4, 6, 14, 15, 16, 17, 23, 29, 30, 33, 37, 40], "easili": [2, 4, 6, 44], "test_log_prob": [2, 4, 6], "data_load": [2, 4, 6, 16, 29, 30, 37, 39, 44], "test_inputs_load": [2, 4, 5, 6, 44], "label": [2, 4, 6, 27, 44, 45, 46], "while": [2, 3, 6, 20, 44, 45], "brier": [2, 6, 17, 44, 45], "score": [2, 6, 15, 17, 27, 44, 45], "expect": [2, 5, 6, 17, 44, 45, 46], "etc": [2, 6, 44, 45], "brier_scor": [2, 6, 17], "plot": [2, 4, 5, 6, 17, 41], "figsiz": [2, 4, 5, 6, 27], "allow": [2, 16, 20], "like": [2, 23, 44, 45, 46], "up": [2, 44], "threshold": [2, 46], "These": [2, 4, 17, 42, 44, 45, 46], "without": [2, 5, 28], "averag": 2, "misclassifi": [2, 46], "larger": [2, 46], "than": [2, 3, 28], "well": [2, 4, 46], "confirm": 2, "intuit": 2, "should": [2, 3, 5, 14, 15, 16, 20, 23, 45, 46], "uncertain": [2, 46], "wrong": [2, 46], "np": [2, 4, 5, 6, 30], "avg_siz": 2, "len": [2, 5], "avg_size_wellclassifi": 2, "avg_size_misclassifi": 2, "size": [2, 4, 6, 16, 24, 27, 32], "over": [2, 15, 16, 17, 20, 29, 30, 33, 37, 40, 45], "If": [2, 3, 4, 6, 14, 16, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46], "alreadi": [2, 3, 4, 5, 6, 44, 45], "still": [2, 4, 6], "them": [2, 3, 4, 5, 6, 16, 17, 30, 40, 44, 45, 46], "For": [2, 4, 5, 6, 14, 37, 40, 44, 46], "onli": [2, 4, 6, 15, 16, 17, 28, 37, 39, 40, 44], "take": [2, 4, 6, 12, 20, 28, 30, 44], "logarithm": [2, 6, 38], "abov": [2, 4, 6, 37, 44, 46], "pretend": [2, 4, 6], "were": [2, 4, 6, 15], "framework": [2, 4, 6, 44, 45], "store": [2, 4, 6, 31, 32, 33, 34, 35, 36], "calib_statu": [2, 4, 6], "similarli": [2, 4, 6, 44, 45], "Then": [2, 4, 6, 23, 26, 39, 45, 46], "exactli": [2, 4, 6], "back": 3, "futur": [3, 28], "time": 3, "directori": [3, 5, 13, 28, 32, 35, 39], "save_checkpoint_dir": [3, 28], "commun": 3, "fitcheckpoint": [3, 28], "process": [3, 12, 28, 31, 32, 33, 34, 35, 36, 44, 45], "mani": 3, "iter": [3, 16], "save_every_n_step": [3, 28], "keep": [3, 13, 28, 32, 35, 39], "recent": 3, "keep_top_n_checkpoint": [3, 13, 28, 32, 35, 39], "disk": 3, "rather": 3, "kept": 3, "memori": [3, 28], "save_st": [3, 13, 28, 32, 35, 39], "continu": 3, "exist": 3, "restore_checkpoint_path": [3, 28], "latter": [3, 44, 45, 46], "either": [3, 16, 17, 31, 44], "filepath": 3, "perhap": [3, 45], "checkpoint_path": [3, 13, 32, 35, 39], "load_stat": [3, 13, 32, 35, 39], "veri": [3, 46], "simpli": 3, "coupl": 4, "relat": [4, 23, 39], "perturb": 4, "nois": [4, 6], "matplotlib": [4, 5, 6, 27], "pyplot": [4, 5, 6, 27], "plt": [4, 5, 6], "make_sinusoid": 4, "n_data": [4, 29], "w": [4, 23, 29, 30, 35, 37, 39], "arang": [4, 5], "30": [4, 14, 21, 30, 37, 40], "pi": 4, "normal": [4, 5, 31, 40], "co": [4, 20], "sum": [4, 37], "train_data": [4, 5, 6, 44], "10000": [4, 6], "val_data": [4, 5, 6], "1000": [4, 6], "test_data": [4, 5, 6, 44], "fig": [4, 5, 6], "ax": [4, 5, 27], "subplot": [4, 5], "scatter": [4, 6], "c0": [4, 6], "legend": [4, 27], "c1": [4, 6], "c2": 4, "from_array_data": [4, 5, 6, 16, 44], "batch_siz": [4, 5, 6, 16, 44], "likelihood_log_variance_model": [4, 5, 23, 39, 44], "both": [4, 5, 15, 16, 17, 39, 44, 45, 46], "varianc": [4, 5, 13, 14, 23, 26, 30, 37, 38, 39, 40, 44, 45], "likelihood": [4, 5, 13, 23, 29, 39, 44, 45], "ensembl": [4, 35, 37], "deepensembleposteriorapproxim": [4, 32], "activ": [4, 6, 21, 24, 25, 44], "tanh": [4, 6], "rmse": [4, 5, 17, 44, 45], "6": [4, 5, 6, 24, 27], "enumer": [4, 5], "fit_statu": [4, 5], "loss": [4, 5, 31], "run": [4, 5, 28], "titl": [4, 6, 27], "decai": [4, 5], "fontsiz": [4, 5, 6, 27], "12": [4, 5, 6], "test_aleatoric_vari": 4, "aleatoric_vari": [4, 37], "test_epistemic_vari": 4, "epistemic_vari": [4, 37], "test_vari": 4, "test_std": 4, "std": [4, 5, 14, 30, 31, 33, 36, 37, 40], "test_cred_interv": [4, 5, 44, 45], "credible_interv": [4, 5, 14, 37, 40, 44, 45], "inputsload": [4, 6, 16, 30, 31, 36, 37], "mesh": 4, "linspac": [4, 6], "mesh_load": 4, "from_array_input": [4, 6, 16], "mesh_mean": 4, "mesh_std": 4, "color": [4, 5], "fill_between": 4, "squeez": 4, "alpha": [4, 5], "loc": 4, "right": [4, 14, 15, 37, 40, 45], "root_mean_squared_error": [4, 17, 44, 45], "prediction_interval_coverage_prob": [4, 17, 44, 45], "cred_picp": 4, "lower_bound": [4, 5, 17, 44, 45], "upper_bound": [4, 5, 17, 44, 45], "picp": [4, 5, 17, 44, 45], "95": [4, 5, 14, 37, 40, 46], "perfectli": 4, "wai": [4, 20, 44, 46], "correct": 4, "val_inputs_load": [4, 5], "val_cred_interv": [4, 5, 45], "test_conformal_interv": [4, 5], "05": [4, 5, 14, 15, 37, 40, 46], "conformal_picp": 4, "anoth": 4, "possibl": [4, 5, 46], "dimensin": 4, "deviat": [4, 14, 15, 30, 31, 33, 36, 37, 40, 46], "onedimensionaluncertaintyconformalregressor": [4, 15, 46], "val_std": 4, "test_conformal_intervals2": 4, "val_pr": [4, 15, 46], "val_uncertainti": [4, 15, 46], "test_pr": [4, 15, 46], "test_uncertainti": [4, 15, 46], "conformal_picp2": 4, "concaten": [4, 39, 45], "axi": [4, 5, 15, 17, 27, 30, 37], "infrastructur": 5, "feel": [5, 17], "free": [5, 17], "cell": 5, "look": [5, 44, 45], "insight": 5, "abc": 5, "o": [5, 13, 26, 39], "zipfil": 5, "urllib": 5, "request": 5, "urlopen": 5, "panda": 5, "pd": 5, "_all_regression_dataset": 5, "add_regress": 5, "__init__": [5, 20], "str": [5, 14, 23, 26, 27, 28, 29, 30, 36, 37, 39, 40, 42], "url": 5, "properti": [5, 14, 23, 29, 30, 37, 38, 40], "datadir": 5, "join": [5, 14, 40], "datapath": 5, "abstractmethod": 5, "read": 5, "ndarrai": [5, 14, 15, 23, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 42, 44, 45], "n": [5, 45], "perm": 5, "z": 5, "z_mean": 5, "keepdim": 5, "z_std": 5, "1e": [5, 6, 28], "preprocess": 5, "x_mean": 5, "x_std": 5, "y_mean": 5, "y_std": 5, "prop_train": 5, "8": [5, 24], "prop_val": 5, "n_train": 5, "n_val": 5, "shuffle_train": 5, "bool": [5, 14, 16, 17, 23, 27, 28, 29, 30, 37], "needs_download": 5, "isfil": 5, "info": 5, "ndownload": 5, "format": [5, 44, 45], "isdir": 5, "mkdir": 5, "filenam": 5, "respons": [5, 14, 23, 31, 32, 33, 34, 36, 37], "open": 5, "wb": 5, "out_fil": 5, "write": 5, "is_zip": 5, "gz": 5, "zip": 5, "tar": 5, "zip_ref": 5, "r": 5, "extractal": 5, "close": 5, "complet": 5, "els": [5, 6], "avail": [5, 33], "uci_base_url": 5, "http": [5, 19], "archiv": 5, "ic": 5, "edu": 5, "ml": 5, "machin": [5, 44], "databas": 5, "boston": 5, "hous": 5, "super": 5, "read_fwf": 5, "header": 5, "valu": [5, 17, 26, 36, 38], "concret": 5, "compress": 5, "concrete_data": 5, "xl": 5, "read_excel": 5, "energi": 5, "00242": 5, "enb2012_data": 5, "xlsx": 5, "naval": 5, "00316": 5, "20cbm": 5, "20dataset": 5, "cbm": 5, "txt": 5, "delet": 5, "11": 5, "00294": 5, "ccpp": 5, "folds5x2_pp": 5, "protein": 5, "00265": 5, "casp": 5, "csv": 5, "read_csv": 5, "winer": 5, "wine": 5, "qualiti": 5, "winequ": 5, "red": 5, "delimit": 5, "winewhit": 5, "white": 5, "yacht": 5, "00243": 5, "yacht_hydrodynam": 5, "regression_dataset": 5, "list": [5, 14, 15, 27, 28, 29, 30, 33, 37], "sort": 5, "download_regression_dataset": 5, "arg": [5, 35], "kwarg": [5, 14, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40], "download_all_regression_dataset": 5, "load_regression_dataset": 5, "dir": 5, "swag": [5, 35, 39], "approach": [5, 39], "final": [5, 44, 45], "quantil": [5, 14, 15, 30, 37, 40, 44], "fitoptim": [5, 6, 28], "optax": [5, 6, 26, 28, 31, 33, 34, 35, 36], "tempfil": 5, "all_statu": 5, "all_metr": 5, "dataset_nam": 5, "temporarydirectori": 5, "data_dir": 5, "512": 5, "find": [5, 13, 14, 29, 30, 37, 38, 39, 40, 43], "batch_input": 5, "batch_target": 5, "break": 5, "optim": [5, 6, 12, 26, 28, 30, 31, 33, 34, 35, 36, 37, 44], "adam": [5, 6, 28], "n_epoch": [5, 28], "100": [5, 28], "algorithm": 5, "dure": [5, 23, 28, 29, 30, 37], "20": 5, "set_titl": 5, "set_ylabel": 5, "tight_layout": 5, "grid": [5, 6], "axhlin": 5, "linestyl": 5, "bar": 5, "width": [5, 21, 44], "ylabel": 5, "ytick": 5, "ylim": [5, 27], "_picp": 5, "annot": 5, "round": 5, "01": 5, "sklearn": 6, "make_moon": 6, "n_sampl": 6, "07": 6, "random_st": 6, "differenti": [6, 35], "variat": [6, 35], "adviposteriorapproxim": [6, 31], "150": 6, "xx": 6, "yy": 6, "_xx": 6, "_yi": 6, "grid_load": 6, "grid_entropi": 6, "entropi": [6, 14, 30, 37, 40, 44, 45], "im": 6, "pcolor": 6, "colorbar": 6, "librari": 10, "quantif": 10, "describ": [12, 13, 16, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 39, 44], "calibconfig": [12, 13, 39], "made": [12, 28], "caliboptim": 12, "calibcheckpoint": 12, "save": [12, 13, 17, 27, 28, 32, 35, 39, 44], "restor": [12, 13, 28, 32, 35, 39, 44], "checkpoint": [12, 13, 28, 32, 35, 39, 44], "calibmonitor": 12, "earli": [12, 28, 44], "stop": [12, 28, 44], "calibprocessor": 12, "calib_config": [12, 13, 39], "base": [12, 13, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40], "processor": [12, 28], "specif": [12, 28, 38], "progress": [12, 28, 44], "induc": [12, 28], "place": [12, 28, 45], "support": [13, 14, 15, 17, 18, 23, 26, 27, 28, 29, 30, 35, 37, 38, 39, 40, 44, 45], "pleas": [13, 14, 19, 29, 30, 37, 38, 39, 40, 43, 44, 45, 46], "regressiontemperaturescal": [13, 26, 39], "inflat": [13, 39], "scalar": [13, 15, 17, 26, 37, 39, 40], "manag": [13, 22, 29, 30, 39], "function": [13, 14, 15, 16, 20, 21, 23, 24, 25, 27, 28, 29, 37, 38, 39, 40, 43, 44, 45, 47], "phi": [13, 26, 29, 35, 39], "see": [13, 14, 17, 27, 39, 40, 44, 46], "output_calib_manag": [13, 14, 30], "outputcalibmanag": [13, 30], "prob_output_lay": [13, 14, 30, 39, 40], "payer": 13, "character": [13, 14, 23, 30, 31, 33, 34, 35, 36, 39, 40], "regressionproboutputlay": [13, 39, 40], "regressionpredict": [13, 14, 37, 39], "inform": [13, 39], "state": [13, 23, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39], "must": [13, 14, 15, 23, 30, 31, 32, 33, 35, 36, 37, 39, 40, 44], "file": [13, 27, 28, 32, 35, 39], "current": [13, 27, 32, 35, 37, 39], "past": [13, 28, 32, 35, 39], "calibmodel": 13, "abstract": [13, 14, 23, 30, 35, 38, 39, 40], "mixin": 13, "all": [13, 14, 20, 28, 29, 33, 35, 44, 46], "trainer": 13, "capabl": 13, "wrapper": [13, 20], "around": 13, "compon": [14, 15, 16, 23, 37, 39], "classificationpredict": [13, 14, 37, 39], "p": [14, 29, 30, 35, 37, 39, 40], "omega": [14, 39, 40], "beforehand": 14, "evalu": [14, 23, 29, 30, 37, 38, 40], "densiti": [14, 29, 30, 37, 38, 40], "pdf": [14, 19, 29, 37, 38, 40, 44, 45], "hot": [14, 30, 37, 40], "encod": [14, 30, 31, 33, 34, 36, 37, 40], "n_target_sampl": [14, 30, 37, 40], "draw": [14, 30, 37, 40], "taken": [14, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40], "interval_typ": [14, 37, 40], "tail": [14, 37, 40], "between": [14, 15, 23, 28, 30, 37, 39, 40], "extrem": [14, 15, 37, 40], "left": [14, 15, 37, 40], "q": [14, 30, 37, 40], "union": [14, 16, 23, 26, 27, 29, 30, 33, 37, 42], "user": [15, 28], "chosen": 15, "desir": 15, "simplepredictionconformalclassifi": 15, "second": [15, 16, 17, 44], "twoo": 16, "dispos": 16, "pytorch": [16, 44], "tensor": 16, "someth": [16, 44], "from_torch_data_load": 16, "targetsload": 16, "to_targets_load": 16, "addition": [16, 30, 44], "to_array_input": 16, "to_array_data": 16, "fromiterabletodataload": 16, "fromcallableiterabletodataload": 16, "fromarraydatatodataload": 16, "fromtensorflowdataloadertodataload": 16, "fromtorchdataloadertodataload": 16, "classmethod": [16, 23, 26, 29, 31, 33, 34, 35, 36], "everi": [16, 38], "out": 16, "from_callable_iter": 16, "fun": 16, "transform": [16, 30, 31, 44], "callabl": [16, 21, 24, 25, 28], "from_iter": 16, "tf_data_load": 16, "torch_data_load": 16, "reduc": 16, "fromarrayinputstoinputsload": 16, "fromdataloadertoinputsload": 16, "from_data_load": 16, "targets_load": 16, "fromarraytargetstotargetsload": 16, "fromdataloadertotargetsload": 16, "from_array_target": 16, "batched_data": 16, "therefor": 17, "1950": 17, "binari": 17, "plot_opt": 17, "naeini": 17, "et": [17, 19], "al": [17, 19], "2015": 17, "guo": 17, "2017": 17, "diagram": [17, 27], "plot_reliability_diagram": [17, 27], "maximum_calibration_error": 17, "mce": 17, "mae": 17, "mean_absolute_error": 17, "absolut": [17, 28], "mean_squared_error": 17, "squar": [17, 44, 45], "mse": 17, "fraction": 17, "lie": 17, "within": [17, 28, 44], "entri": [17, 38], "rmae": 17, "root_mean_absolute_error": 17, "root": [17, 44, 45], "perceptron": [18, 44], "resnet": 18, "wideresnet": 18, "lenet": 19, "parent": [19, 21, 24, 25, 26], "_sentinel": [19, 21, 24, 25, 26], "lecun": 19, "1989": 19, "yann": 19, "com": 19, "exdb": 19, "publi": 19, "89e": 19, "intern": [19, 28, 31, 32, 33, 34, 35, 36, 43], "subclass": 20, "python": 20, "7": 20, "dataclass": 20, "instead": [20, 37], "overrid": 20, "setup": 20, "submodul": 20, "nest": 20, "tree": 20, "structur": [20, 38], "submodel": 20, "assign": [20, 26, 31, 33, 34, 35, 36], "regular": 20, "insid": 20, "special": 20, "popular": 20, "choic": [20, 44], "becaus": 20, "instanc": [20, 33], "thei": [20, 46], "16": 20, "dense1": 20, "dense2": 20, "concis": 20, "definit": 20, "locat": [20, 27, 28], "custom_deriv": [21, 24, 25], "custom_jvp": [21, 24, 25], "unit": 21, "hidden": 21, "after": 21, "determinist": [22, 23, 39], "choos": 22, "among": 22, "overwrit": [22, 26, 38], "orchestr": [22, 23, 30, 39], "model_manag": [23, 30, 39], "classificationmodelmanag": [23, 39], "softmax": [23, 39, 40, 44], "vector": [23, 38, 39], "same": [23, 38, 39, 44], "mutabl": [23, 26, 29, 30, 31, 33, 34, 35, 36, 37, 42], "mai": [23, 44, 45, 46], "pytre": [23, 38], "input_shap": [23, 29, 31], "frozendict": [23, 26, 42], "regressionmodelmanag": [23, 39], "belong": [23, 39], "space": [23, 39, 44], "mu": [23, 39, 40, 45], "gaussian": [23, 31, 36, 38, 39, 40, 45], "sigma": [23, 39, 40, 45], "modelmanag": [23, 30], "modelmanagerst": [23, 29], "init_from_dict": [23, 26, 31, 33, 34, 35, 36], "dictionari": [23, 26, 31, 33, 34, 35, 36], "stage_s": 24, "block_cl": 24, "num_filt": 24, "linear": [24, 25, 44], "extractor": 24, "subnetwork": [24, 25], "stage": 24, "sequenc": [24, 30, 33, 37], "block": 24, "moduledef": [24, 25], "filter": 24, "resnet18": 24, "alia": [24, 25, 42], "functool": [24, 25], "partial": [24, 25], "resnetblock": 24, "resnet34": 24, "resnet50": 24, "bottleneckresnetblock": 24, "resnet101": 24, "23": 24, "resnet152": 24, "36": 24, "resnet200": 24, "24": 24, "depth": 25, "28": 25, "widen_factor": 25, "dropout_r": 25, "wide": 25, "residu": 25, "widen": 25, "factor": 25, "dropout": 25, "rate": 25, "wideresnet28_10": 25, "explicitli": 26, "altern": [26, 38], "classificationtemperaturescal": [13, 26, 39], "seen": 26, "exp": 26, "scope": 26, "multipli": 26, "calibst": 26, "step": [26, 28, 31, 33, 34, 35, 36], "apply_fn": [26, 31, 33, 34, 35, 36], "tx": [26, 31, 33, 34, 35, 36], "opt_stat": [26, 31, 33, 34, 35, 36], "encoded_nam": [26, 31, 33, 34, 35, 36], "devicearrai": [26, 31, 33, 34, 35, 36], "67": 26, "97": [26, 31, 33, 34, 35, 36], "108": [26, 33], "105": [26, 35], "98": 26, "83": [26, 31, 33, 34, 35, 36], "116": [26, 31, 33, 34, 35, 36], "101": [26, 31, 33, 34, 35, 36], "int32": [26, 31, 33, 34, 35, 36], "optaxoptim": [26, 28, 31, 33, 34, 35, 36, 42], "associ": [26, 31, 33, 34, 35, 36], "conf": 27, "legend_loc": 27, "save_opt": 27, "bin": 27, "multipl": [27, 30, 37], "accept": 27, "confid": [27, 44, 45], "presum": 27, "font": 27, "bottom": 27, "top": 27, "limit": 27, "savefig": 27, "fitprocessor": 28, "epoch": 28, "early_stopping_monitor": 28, "val_loss": 28, "early_stopping_min_delta": 28, "eval_every_n_epoch": 28, "disable_training_metrics_comput": 28, "verbos": 28, "consecut": 28, "perform": [28, 39, 44], "befor": 28, "minimum": 28, "chang": 28, "consid": [28, 46], "less": 28, "lead": 28, "potenti": [28, 45], "disabl": 28, "metrics_nam": 28, "otherwis": 28, "runtim": 28, "every_n_train_step": 28, "dump": 28, "gpu": 28, "disable_jit": 28, "aspect": 28, "devic": [28, 44], "At": 28, "moment": 28, "loop": 28, "jit": 28, "observ": [29, 30, 37], "batched_log_prob": 29, "calib_param": [29, 30, 31, 33, 34, 35, 36, 37], "calib_mut": [29, 30, 31, 33, 34, 35, 36, 37], "return_aux": [29, 30, 37], "total": 29, "rescal": [13, 29, 39], "full": 29, "calibparam": [29, 30, 31, 33, 34, 35, 36, 37, 42], "calibmut": [29, 30, 31, 33, 34, 35, 36, 37, 42], "auxiliari": [29, 30, 37], "jointstat": [29, 31, 32, 33, 34, 35, 36], "init_from_st": 29, "model_manager_st": 29, "output_calib_manager_st": 29, "outputcalibmanagerst": 29, "classificationlikelihood": [30, 39], "posit": 30, "integr": 30, "form": [30, 36], "three": 30, "proboutputlay": [30, 40], "mathbb": [30, 37], "_": [30, 37], "calib": [30, 37], "tild": [30, 37], "text": [30, 37, 39, 40], "argmax": [30, 37], "_y": [30, 37], "upon": [30, 37], "sqrt": [30, 37], "var": [30, 37], "regressionlikelihood": [30, 39], "target_sampl": 30, "th": [30, 37], "inclus": 30, "result": [30, 37, 44], "maker": 30, "normalizing_flow": 31, "advi_approxim": 31, "std_init_param": 31, "std_base": 31, "n_loss_sampl": 31, "flow": 31, "isotrop": [31, 39], "kl": 31, "diverg": 31, "elbo": 31, "advi_posterior": 31, "adviposterior": 31, "joint": [31, 32, 33, 34, 35, 36, 39], "_inputs_load": 31, "singl": 31, "ignor": 31, "advi_st": 31, "advist": 31, "65": [31, 34, 36], "68": 31, "86": 31, "73": 31, "posteriorst": [31, 33, 34, 35, 36], "convert_from_map_st": [31, 33, 36], "map_stat": [31, 33, 34, 36], "mapstat": [31, 33, 34, 36], "deep_ensembl": 32, "deep_ensemble_approxim": 32, "ensemble_s": 32, "deep_ensemble_posterior": 32, "deepensembleposterior": 32, "deepensembl": 32, "checkpoint_dir": 32, "laplace_approxim": 33, "laplace_posterior": 33, "laplaceposterior": 33, "laplace_st": 33, "laplacest": 33, "76": 33, "112": 33, "99": 33, "map_approxim": 34, "mapposteriorapproxim": 34, "map_posterior": 34, "mapposterior": 34, "77": 34, "advi": 35, "mathcal": [35, 37, 39], "posteriorapproxim": [35, 39], "111": 35, "115": 35, "114": 35, "swag_approxim": 36, "swagposteriorapproxim": [36, 39], "rank": 36, "covari": [36, 38], "matrix": [36, 38], "diagon": [36, 38], "low": 36, "empir": 36, "least": 36, "swag_posterior": 36, "swagposterior": 36, "swag_stat": 36, "swagstat": 36, "87": 36, "71": 36, "dev": 36, "term": 36, "aleatoric_entropi": 37, "n_posterior_sampl": 37, "aleator": 37, "epistemic_entropi": 37, "epistem": 37, "note": 37, "ensemble_output": 37, "sim": 37, "cdot": 37, "isotropicgaussianprior": [38, 39], "diagonalgaussianprior": 38, "log_var": 38, "categor": [39, 40], "classificationproboutputlay": [13, 39, 40], "Its": 39, "mont": 39, "carlo": 39, "fit_kwarg": 39, "relev": 39, "probmodel": 39, "individu": 40, "That": [40, 44], "custom": 42, "gradienttransform": 42, "whenev": 43, "combin": 44, "methodologi": 44, "give": [44, 45], "highest": 44, "chanc": 44, "select": 44, "Of": 44, "cours": 44, "familiar": 44, "welcom": 44, "best": 44, "serv": 44, "explor": 44, "convers": 44, "wrap": 44, "consult": [44, 45], "particularli": 44, "concept": 44, "go": 44, "part": 44, "post": 44, "calib_data": 44, "encourag": [44, 45], "specifi": 44, "stick": [44, 45], "readi": [44, 45], "apart": 44, "With": 44, "test_logprob": [44, 45], "oper": [44, 45], "narrai": 44, "often": 44, "again": [44, 45], "simplic": 44, "new": 44, "calib_inputs_load": 44, "calib_target": 44, "calib_mean": 44, "invit": 44, "contrast": [44, 45], "repres": [44, 45], "measur": [44, 45, 46], "calib_cred_interv": 44, "scenario": 45, "languag": 45, "attach": 45, "mathemat": 45, "theta": 45, "big": 45, "calibregress": 45, "valcalib_cred_interv": 45, "bad": 46, "uninform": 46, "collect": 46, "overal": 46, "smaller": 46, "notic": 46, "highli": 46, "almost": 46, "signal": 46, "high": 46, "think": 46, "rang": 46, "explain": 47, "main": 47, "calib_st": 26, "readm": [], "rst": []}, "objects": {"flax.linen": [[20, 0, 0, "-", "Module"]], "fortuna.calib_config.base": [[12, 1, 1, "", "CalibConfig"]], "fortuna.calib_model": [[13, 0, 0, "-", "base"], [13, 0, 0, "-", "classification"], [13, 0, 0, "-", "regression"]], "fortuna.calib_model.base": [[13, 1, 1, "", "CalibModel"]], "fortuna.calib_model.base.CalibModel": [[13, 2, 1, "", "calibrate"], [13, 2, 1, "", "load_state"], [13, 2, 1, "", "save_state"]], "fortuna.calib_model.classification": [[13, 1, 1, "", "CalibClassifier"]], "fortuna.calib_model.classification.CalibClassifier": [[13, 2, 1, "", "calibrate"], [13, 2, 1, "", "load_state"], [13, 3, 1, "", "output_calib_manager"], [13, 3, 1, "", "output_calibrator"], [13, 3, 1, "", "predictive"], [13, 3, 1, "", "prob_output_layer"], [13, 2, 1, "", "save_state"]], "fortuna.calib_model.predictive": [[14, 0, 0, "-", "classification"], [14, 0, 0, "-", "regression"]], "fortuna.calib_model.predictive.classification": [[14, 1, 1, "", "ClassificationPredictive"]], "fortuna.calib_model.predictive.classification.ClassificationPredictive": [[14, 2, 1, "", "entropy"], [14, 2, 1, "", "log_prob"], [14, 2, 1, "", "mean"], [14, 2, 1, "", "mode"], [14, 4, 1, "", "rng"], [14, 2, 1, "", "sample"], [14, 2, 1, "", "std"], [14, 2, 1, "", "variance"]], "fortuna.calib_model.predictive.regression": [[14, 1, 1, "", "RegressionPredictive"]], "fortuna.calib_model.predictive.regression.RegressionPredictive": [[14, 2, 1, "", "credible_interval"], [14, 2, 1, "", "entropy"], [14, 2, 1, "", "log_prob"], [14, 2, 1, "", "mean"], [14, 2, 1, "", "mode"], [14, 2, 1, "", "quantile"], [14, 4, 1, "", "rng"], [14, 2, 1, "", "sample"], [14, 2, 1, "", "std"], [14, 2, 1, "", "variance"]], "fortuna.calib_model.regression": [[13, 1, 1, "", "CalibRegressor"]], "fortuna.calib_model.regression.CalibRegressor": [[13, 2, 1, "", "calibrate"], [13, 2, 1, "", "load_state"], [13, 3, 1, "", "output_calib_manager"], [13, 3, 1, "", "output_calibrator"], [13, 3, 1, "", "predictive"], [13, 3, 1, "", "prob_output_layer"], [13, 2, 1, "", "save_state"]], "fortuna.conformer": [[15, 0, 0, "-", "classification"], [15, 0, 0, "-", "regression"]], "fortuna.conformer.classification": [[15, 1, 1, "", "AdaptivePredictionConformalClassifier"], [15, 1, 1, "", "SimplePredictionConformalClassifier"]], "fortuna.conformer.classification.AdaptivePredictionConformalClassifier": [[15, 2, 1, "", "conformal_set"], [15, 2, 1, "", "quantile"], [15, 2, 1, "", "score"]], "fortuna.conformer.classification.SimplePredictionConformalClassifier": [[15, 2, 1, "", "conformal_set"], [15, 2, 1, "", "quantile"], [15, 2, 1, "", "score"]], "fortuna.conformer.regression": [[15, 1, 1, "", "OneDimensionalUncertaintyConformalRegressor"], [15, 1, 1, "", "QuantileConformalRegressor"]], "fortuna.conformer.regression.OneDimensionalUncertaintyConformalRegressor": [[15, 2, 1, "", "conformal_interval"], [15, 2, 1, "", "quantile"], [15, 2, 1, "", "score"]], "fortuna.conformer.regression.QuantileConformalRegressor": [[15, 2, 1, "", "conformal_interval"], [15, 2, 1, "", "quantile"], [15, 2, 1, "", "score"]], "fortuna.data.loader": [[16, 1, 1, "", "DataLoader"], [16, 1, 1, "", "FromArrayDataToDataLoader"], [16, 1, 1, "", "FromArrayInputsToInputsLoader"], [16, 1, 1, "", "FromArrayTargetsToTargetsLoader"], [16, 1, 1, "", "FromCallableIterableToDataLoader"], [16, 1, 1, "", "FromDataLoaderToInputsLoader"], [16, 1, 1, "", "FromDataLoaderToTargetsLoader"], [16, 1, 1, "", "FromIterableToDataLoader"], [16, 1, 1, "", "InputsLoader"], [16, 1, 1, "", "TargetsLoader"]], "fortuna.data.loader.DataLoader": [[16, 2, 1, "", "from_array_data"], [16, 2, 1, "", "from_callable_iterable"], [16, 2, 1, "", "from_iterable"], [16, 2, 1, "", "from_tensorflow_data_loader"], [16, 2, 1, "", "from_torch_data_loader"], [16, 2, 1, "", "to_array_data"], [16, 2, 1, "", "to_array_inputs"], [16, 2, 1, "", "to_array_targets"], [16, 2, 1, "", "to_inputs_loader"], [16, 2, 1, "", "to_targets_loader"]], "fortuna.data.loader.InputsLoader": [[16, 2, 1, "", "from_array_inputs"], [16, 2, 1, "", "from_data_loader"], [16, 2, 1, "", "to_array_inputs"]], "fortuna.data.loader.TargetsLoader": [[16, 2, 1, "", "from_array_targets"], [16, 2, 1, "", "from_data_loader"], [16, 2, 1, "", "to_array_targets"]], "fortuna.metric": [[17, 0, 0, "-", "classification"], [17, 0, 0, "-", "regression"]], "fortuna.metric.classification": [[17, 5, 1, "", "accuracy"], [17, 5, 1, "", "brier_score"], [17, 5, 1, "", "ece"], [17, 5, 1, "", "expected_calibration_error"], [17, 5, 1, "", "maximum_calibration_error"], [17, 5, 1, "", "mce"]], "fortuna.metric.regression": [[17, 5, 1, "", "mae"], [17, 5, 1, "", "mean_absolute_error"], [17, 5, 1, "", "mean_squared_error"], [17, 5, 1, "", "mse"], [17, 5, 1, "", "picp"], [17, 5, 1, "", "prediction_interval_coverage_probability"], [17, 5, 1, "", "rmae"], [17, 5, 1, "", "rmse"], [17, 5, 1, "", "root_mean_absolute_error"], [17, 5, 1, "", "root_mean_squared_error"]], "fortuna.model.lenet": [[19, 1, 1, "", "LeNet5"]], "fortuna.model.lenet.LeNet5": [[19, 3, 1, "", "dtype"], [19, 3, 1, "", "output_dim"]], "fortuna.model.mlp": [[21, 1, 1, "", "MLP"]], "fortuna.model.model_manager": [[23, 0, 0, "-", "base"], [23, 0, 0, "-", "classification"], [23, 0, 0, "-", "regression"]], "fortuna.model.model_manager.base": [[23, 1, 1, "", "ModelManager"]], "fortuna.model.model_manager.base.ModelManager": [[23, 2, 1, "", "apply"], [23, 2, 1, "", "init"], [23, 4, 1, "", "rng"]], "fortuna.model.model_manager.classification": [[23, 1, 1, "", "ClassificationModelManager"]], "fortuna.model.model_manager.classification.ClassificationModelManager": [[23, 2, 1, "", "apply"], [23, 2, 1, "", "init"], [23, 4, 1, "", "rng"]], "fortuna.model.model_manager.regression": [[23, 1, 1, "", "RegressionModelManager"]], "fortuna.model.model_manager.regression.RegressionModelManager": [[23, 2, 1, "", "apply"], [23, 2, 1, "", "init"], [23, 4, 1, "", "rng"]], "fortuna.model.model_manager.state": [[23, 1, 1, "", "ModelManagerState"]], "fortuna.model.model_manager.state.ModelManagerState": [[23, 2, 1, "", "init_from_dict"]], "fortuna.model.resnet": [[24, 1, 1, "", "ResNet"], [24, 3, 1, "", "ResNet101"], [24, 3, 1, "", "ResNet152"], [24, 3, 1, "", "ResNet18"], [24, 3, 1, "", "ResNet200"], [24, 3, 1, "", "ResNet34"], [24, 3, 1, "", "ResNet50"]], "fortuna.model.resnet.ResNet": [[24, 3, 1, "", "activation"], [24, 3, 1, "", "block_cls"], [24, 3, 1, "", "conv"], [24, 3, 1, "", "dtype"], [24, 3, 1, "", "num_filters"], [24, 3, 1, "", "output_dim"], [24, 3, 1, "", "stage_sizes"]], "fortuna.model.wideresnet": [[25, 1, 1, "", "WideResNet"], [25, 3, 1, "", "WideResNet28_10"]], "fortuna.model.wideresnet.WideResNet": [[25, 3, 1, "", "activation"], [25, 3, 1, "", "conv"], [25, 3, 1, "", "depth"], [25, 3, 1, "", "dropout_rate"], [25, 3, 1, "", "dtype"], [25, 3, 1, "", "output_dim"], [25, 3, 1, "", "widen_factor"]], "fortuna.output_calibrator": [[26, 0, 0, "-", "classification"], [26, 0, 0, "-", "regression"]], "fortuna.output_calibrator.classification": [[26, 1, 1, "", "ClassificationTemperatureScaler"]], "fortuna.output_calibrator.classification.ClassificationTemperatureScaler": [[26, 3, 1, "", "name"], [26, 3, 1, "", "parent"], [26, 3, 1, "", "scope"]], "fortuna.output_calibrator.regression": [[26, 1, 1, "", "RegressionTemperatureScaler"]], "fortuna.output_calibrator.regression.RegressionTemperatureScaler": [[26, 3, 1, "", "name"], [26, 3, 1, "", "parent"], [26, 3, 1, "", "scope"]], "fortuna.plot": [[27, 5, 1, "", "plot_reliability_diagram"]], "fortuna.prob_model": [[39, 0, 0, "-", "base"], [39, 0, 0, "-", "classification"], [39, 0, 0, "-", "regression"]], "fortuna.prob_model.base": [[39, 1, 1, "", "ProbModel"]], "fortuna.prob_model.base.ProbModel": [[39, 2, 1, "", "calibrate"], [39, 2, 1, "", "load_state"], [39, 2, 1, "", "save_state"], [39, 2, 1, "", "train"]], "fortuna.prob_model.classification": [[39, 1, 1, "", "ProbClassifier"]], "fortuna.prob_model.classification.ProbClassifier": [[39, 2, 1, "", "calibrate"], [39, 3, 1, "", "joint"], [39, 3, 1, "", "likelihood"], [39, 2, 1, "", "load_state"], [39, 3, 1, "", "model"], [39, 3, 1, "", "model_manager"], [39, 3, 1, "", "output_calibrator"], [39, 3, 1, "", "posterior"], [39, 3, 1, "", "posterior_approximator"], [39, 3, 1, "", "predictive"], [39, 3, 1, "", "prior"], [39, 3, 1, "", "prob_output_layer"], [39, 2, 1, "", "save_state"], [39, 2, 1, "", "train"]], "fortuna.prob_model.fit_config.base": [[28, 1, 1, "", "FitConfig"]], "fortuna.prob_model.fit_config.checkpointer": [[28, 1, 1, "", "FitCheckpointer"]], "fortuna.prob_model.fit_config.monitor": [[28, 1, 1, "", "FitMonitor"]], "fortuna.prob_model.fit_config.optimizer": [[28, 1, 1, "", "FitOptimizer"]], "fortuna.prob_model.fit_config.processor": [[28, 1, 1, "", "FitProcessor"]], "fortuna.prob_model.joint": [[29, 0, 0, "-", "base"]], "fortuna.prob_model.joint.base": [[29, 1, 1, "", "Joint"]], "fortuna.prob_model.joint.base.Joint": [[29, 2, 1, "", "batched_log_prob"], [29, 2, 1, "", "init"], [29, 2, 1, "", "log_prob"], [29, 4, 1, "", "rng"]], "fortuna.prob_model.joint.state": [[29, 1, 1, "", "JointState"]], "fortuna.prob_model.joint.state.JointState": [[29, 2, 1, "", "init_from_states"]], "fortuna.prob_model.likelihood": [[30, 0, 0, "-", "base"], [30, 0, 0, "-", "classification"], [30, 0, 0, "-", "regression"]], "fortuna.prob_model.likelihood.base": [[30, 1, 1, "", "Likelihood"]], "fortuna.prob_model.likelihood.base.Likelihood": [[30, 2, 1, "", "entropy"], [30, 2, 1, "", "log_prob"], [30, 2, 1, "", "mean"], [30, 2, 1, "", "mode"], [30, 4, 1, "", "rng"], [30, 2, 1, "", "sample"], [30, 2, 1, "", "std"], [30, 2, 1, "", "variance"]], "fortuna.prob_model.likelihood.classification": [[30, 1, 1, "", "ClassificationLikelihood"]], "fortuna.prob_model.likelihood.classification.ClassificationLikelihood": [[30, 2, 1, "", "entropy"], [30, 2, 1, "", "log_prob"], [30, 2, 1, "", "mean"], [30, 2, 1, "", "mode"], [30, 4, 1, "", "rng"], [30, 2, 1, "", "sample"], [30, 2, 1, "", "std"], [30, 2, 1, "", "variance"]], "fortuna.prob_model.likelihood.regression": [[30, 1, 1, "", "RegressionLikelihood"]], "fortuna.prob_model.likelihood.regression.RegressionLikelihood": [[30, 2, 1, "", "entropy"], [30, 2, 1, "", "log_prob"], [30, 2, 1, "", "mean"], [30, 2, 1, "", "mode"], [30, 2, 1, "", "quantile"], [30, 4, 1, "", "rng"], [30, 2, 1, "", "sample"], [30, 2, 1, "", "std"], [30, 2, 1, "", "variance"]], "fortuna.prob_model.posterior.base": [[35, 1, 1, "", "Posterior"], [35, 1, 1, "", "PosteriorApproximator"]], "fortuna.prob_model.posterior.base.Posterior": [[35, 2, 1, "", "fit"], [35, 2, 1, "", "load_state"], [35, 2, 1, "", "sample"], [35, 2, 1, "", "save_state"]], "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_approximator": [[32, 1, 1, "", "DeepEnsemblePosteriorApproximator"]], "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior": [[32, 1, 1, "", "DeepEnsemblePosterior"]], "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.DeepEnsemblePosterior": [[32, 2, 1, "", "fit"], [32, 2, 1, "", "load_state"], [32, 2, 1, "", "sample"], [32, 2, 1, "", "save_state"]], "fortuna.prob_model.posterior.laplace.laplace_approximator": [[33, 1, 1, "", "LaplacePosteriorApproximator"]], "fortuna.prob_model.posterior.laplace.laplace_posterior": [[33, 1, 1, "", "LaplacePosterior"]], "fortuna.prob_model.posterior.laplace.laplace_posterior.LaplacePosterior": [[33, 2, 1, "", "fit"], [33, 2, 1, "", "sample"]], "fortuna.prob_model.posterior.laplace.laplace_state": [[33, 1, 1, "", "LaplaceState"]], "fortuna.prob_model.posterior.laplace.laplace_state.LaplaceState": [[33, 2, 1, "", "convert_from_map_state"], [33, 3, 1, "", "encoded_name"], [33, 2, 1, "", "init"], [33, 2, 1, "", "init_from_dict"]], "fortuna.prob_model.posterior.map.map_approximator": [[34, 1, 1, "", "MAPPosteriorApproximator"]], "fortuna.prob_model.posterior.map.map_posterior": [[34, 1, 1, "", "MAPPosterior"]], "fortuna.prob_model.posterior.map.map_posterior.MAPPosterior": [[34, 2, 1, "", "fit"], [34, 2, 1, "", "sample"]], "fortuna.prob_model.posterior.map.map_state": [[34, 1, 1, "", "MAPState"]], "fortuna.prob_model.posterior.map.map_state.MAPState": [[34, 3, 1, "", "encoded_name"], [34, 2, 1, "", "init"], [34, 2, 1, "", "init_from_dict"]], "fortuna.prob_model.posterior.normalizing_flow.advi.advi_approximator": [[31, 1, 1, "", "ADVIPosteriorApproximator"]], "fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior": [[31, 1, 1, "", "ADVIPosterior"]], "fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior.ADVIPosterior": [[31, 2, 1, "", "fit"], [31, 2, 1, "", "sample"]], "fortuna.prob_model.posterior.normalizing_flow.advi.advi_state": [[31, 1, 1, "", "ADVIState"]], "fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.ADVIState": [[31, 2, 1, "", "convert_from_map_state"], [31, 3, 1, "", "encoded_name"], [31, 2, 1, "", "init"], [31, 2, 1, "", "init_from_dict"]], "fortuna.prob_model.posterior.state": [[35, 1, 1, "", "PosteriorState"]], "fortuna.prob_model.posterior.state.PosteriorState": [[35, 2, 1, "", "init"], [35, 2, 1, "", "init_from_dict"]], "fortuna.prob_model.posterior.swag.swag_approximator": [[36, 1, 1, "", "SWAGPosteriorApproximator"]], "fortuna.prob_model.posterior.swag.swag_posterior": [[36, 1, 1, "", "SWAGPosterior"]], "fortuna.prob_model.posterior.swag.swag_posterior.SWAGPosterior": [[36, 2, 1, "", "fit"], [36, 2, 1, "", "sample"]], "fortuna.prob_model.posterior.swag.swag_state": [[36, 1, 1, "", "SWAGState"]], "fortuna.prob_model.posterior.swag.swag_state.SWAGState": [[36, 2, 1, "", "convert_from_map_state"], [36, 3, 1, "", "dev"], [36, 3, 1, "", "encoded_name"], [36, 2, 1, "", "init"], [36, 2, 1, "", "init_from_dict"], [36, 3, 1, "", "mean"], [36, 3, 1, "", "std"], [36, 2, 1, "", "update"]], "fortuna.prob_model.predictive": [[37, 0, 0, "-", "classification"], [37, 0, 0, "-", "regression"]], "fortuna.prob_model.predictive.classification": [[37, 1, 1, "", "ClassificationPredictive"]], "fortuna.prob_model.predictive.classification.ClassificationPredictive": [[37, 2, 1, "", "aleatoric_entropy"], [37, 2, 1, "", "aleatoric_variance"], [37, 2, 1, "", "entropy"], [37, 2, 1, "", "epistemic_entropy"], [37, 2, 1, "", "epistemic_variance"], [37, 2, 1, "", "log_prob"], [37, 2, 1, "", "mean"], [37, 2, 1, "", "mode"], [37, 4, 1, "", "rng"], [37, 2, 1, "", "sample"], [37, 2, 1, "", "std"], [37, 2, 1, "", "variance"]], "fortuna.prob_model.predictive.regression": [[37, 1, 1, "", "RegressionPredictive"]], "fortuna.prob_model.predictive.regression.RegressionPredictive": [[37, 2, 1, "", "aleatoric_entropy"], [37, 2, 1, "", "aleatoric_variance"], [37, 2, 1, "", "credible_interval"], [37, 2, 1, "", "entropy"], [37, 2, 1, "", "epistemic_entropy"], [37, 2, 1, "", "epistemic_variance"], [37, 2, 1, "", "log_prob"], [37, 2, 1, "", "mean"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "quantile"], [37, 4, 1, "", "rng"], [37, 2, 1, "", "sample"], [37, 2, 1, "", "std"], [37, 2, 1, "", "variance"]], "fortuna.prob_model.prior": [[38, 0, 0, "-", "base"], [38, 0, 0, "-", "gaussian"]], "fortuna.prob_model.prior.base": [[38, 1, 1, "", "Prior"]], "fortuna.prob_model.prior.base.Prior": [[38, 2, 1, "", "log_prob"], [38, 4, 1, "", "rng"], [38, 2, 1, "", "sample"]], "fortuna.prob_model.prior.gaussian": [[38, 1, 1, "", "DiagonalGaussianPrior"], [38, 1, 1, "", "IsotropicGaussianPrior"]], "fortuna.prob_model.prior.gaussian.DiagonalGaussianPrior": [[38, 2, 1, "", "log_prob"], [38, 4, 1, "", "rng"], [38, 2, 1, "", "sample"]], "fortuna.prob_model.prior.gaussian.IsotropicGaussianPrior": [[38, 2, 1, "", "log_prob"], [38, 4, 1, "", "rng"], [38, 2, 1, "", "sample"]], "fortuna.prob_model.regression": [[39, 1, 1, "", "ProbRegressor"]], "fortuna.prob_model.regression.ProbRegressor": [[39, 2, 1, "", "calibrate"], [39, 3, 1, "", "joint"], [39, 3, 1, "", "likelihood"], [39, 2, 1, "", "load_state"], [39, 3, 1, "", "model"], [39, 3, 1, "", "model_manager"], [39, 3, 1, "", "output_calibrator"], [39, 3, 1, "", "posterior"], [39, 3, 1, "", "posterior_approximator"], [39, 3, 1, "", "predictive"], [39, 3, 1, "", "prior"], [39, 3, 1, "", "prob_output_layer"], [39, 2, 1, "", "save_state"], [39, 2, 1, "", "train"]], "fortuna.prob_output_layer": [[40, 0, 0, "-", "base"], [40, 0, 0, "-", "classification"], [40, 0, 0, "-", "regression"]], "fortuna.prob_output_layer.base": [[40, 1, 1, "", "ProbOutputLayer"]], "fortuna.prob_output_layer.base.ProbOutputLayer": [[40, 2, 1, "", "entropy"], [40, 2, 1, "", "log_prob"], [40, 2, 1, "", "mean"], [40, 2, 1, "", "mode"], [40, 2, 1, "", "predict"], [40, 4, 1, "", "rng"], [40, 2, 1, "", "sample"], [40, 2, 1, "", "std"], [40, 2, 1, "", "variance"]], "fortuna.prob_output_layer.classification": [[40, 1, 1, "", "ClassificationProbOutputLayer"]], "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer": [[40, 2, 1, "", "entropy"], [40, 2, 1, "", "log_prob"], [40, 2, 1, "", "mean"], [40, 2, 1, "", "mode"], [40, 2, 1, "", "predict"], [40, 4, 1, "", "rng"], [40, 2, 1, "", "sample"], [40, 2, 1, "", "std"], [40, 2, 1, "", "variance"]], "fortuna.prob_output_layer.regression": [[40, 1, 1, "", "RegressionProbOutputLayer"]], "fortuna.prob_output_layer.regression.RegressionProbOutputLayer": [[40, 2, 1, "", "credible_interval"], [40, 2, 1, "", "entropy"], [40, 2, 1, "", "log_prob"], [40, 2, 1, "", "mean"], [40, 2, 1, "", "mode"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "quantile"], [40, 4, 1, "", "rng"], [40, 2, 1, "", "sample"], [40, 2, 1, "", "std"], [40, 2, 1, "", "variance"]], "fortuna.training.calib_state": [[26, 1, 1, "", "CalibState"]], "fortuna.training.calib_state.CalibState": [[26, 2, 1, "", "init"], [26, 2, 1, "", "init_from_dict"]], "fortuna.typing": [[42, 3, 1, "", "Array"], [42, 3, 1, "", "Batch"], [42, 3, 1, "", "CalibMutable"], [42, 3, 1, "", "CalibParams"], [42, 3, 1, "", "Mutable"], [42, 3, 1, "", "OptaxOptimizer"], [42, 3, 1, "", "Params"], [42, 3, 1, "", "Path"], [42, 3, 1, "", "Status"]], "fortuna.utils.random": [[43, 1, 1, "", "RandomNumberGenerator"]], "fortuna.utils.random.RandomNumberGenerator": [[43, 2, 1, "", "get"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"fortuna": 7, "A": [7, 34], "librari": 7, "uncertainti": [7, 46], "quantif": 7, "quickstart": [7, 10], "instal": [7, 8], "licens": [7, 9], "bring": 0, "your": 0, "own": 0, "object": 0, "model": [0, 2, 3, 4, 6, 13, 18, 22, 23, 39, 44, 45], "prior": [0, 38], "distribut": [0, 14, 29, 37, 38], "output": [0, 2, 4, 6, 26, 40, 45], "calibr": [0, 2, 4, 6, 12, 13, 26, 45], "exampl": [1, 46], "mnist": 2, "classif": [2, 6, 44, 45, 46], "download": [2, 5, 6], "data": [2, 4, 5, 6, 16, 44], "from": [2, 4, 5, 6, 44, 45, 46], "tensorflow": 2, "convert": [2, 4, 6], "compat": [2, 4, 6], "loader": [2, 4, 6, 16, 44], "build": [2, 4, 6, 44, 45], "probabilist": [2, 3, 4, 6, 39, 40, 44], "classifi": [2, 6, 45], "train": [2, 3, 4, 6, 44], "posterior": [2, 4, 6, 28, 35], "fit": [2, 4, 6, 28], "estim": [2, 4, 6, 44, 45, 46], "predict": [2, 4, 6, 14, 37, 46], "statist": [2, 4, 6, 44, 45], "comput": [2, 4, 6, 44, 45], "metric": [2, 4, 6, 17, 44, 45], "conform": [2, 4, 15, 44, 45, 46], "set": [2, 5, 44, 45], "what": [2, 4, 6], "we": [2, 4, 6], "had": [2, 4, 6], "start": [2, 4, 6], "save": 3, "load": 3, "checkpoint": 3, "restor": 3, "further": 3, "state": 3, "sinusoid": 4, "regress": [4, 5, 44, 45, 46], "gener": 4, "regressor": [4, 45], "interv": [4, 44, 45, 46], "tabular": 5, "dataset": 5, "uci": 5, "each": 5, "two": 6, "moon": 6, "scikit": 6, "learn": 6, "configur": [12, 28], "built": 18, "cnn": 19, "flax": [20, 44], "linen": 20, "modul": 20, "multi": 21, "layer": [21, 40], "perceptron": 21, "mlp": 21, "content": [22, 41, 47], "manag": 23, "resnet": 24, "wideresnet": 25, "plot": 27, "joint": 29, "likelihood": 30, "function": 30, "automat": 31, "differenti": 31, "variat": 31, "infer": 31, "advi": 31, "deep": 32, "ensembl": 32, "laplac": 33, "approxim": 33, "maximum": 34, "posteriori": 34, "map": 34, "swag": 36, "api": 41, "refer": 41, "type": 42, "util": 43, "provid": 44, "choos": 44, "probabl": 46, "confid": 46, "credibl": 46, "scalar": 46, "usag": 47, "mode": 47}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Bring in your own objects": [[0, "Bring-in-your-own-objects"]], "Bring in your own model": [[0, "Bring-in-your-own-model"]], "Bring in your own prior distribution": [[0, "Bring-in-your-own-prior-distribution"]], "Bring in your own output calibrator": [[0, "Bring-in-your-own-output-calibrator"]], "Examples": [[1, "examples"]], "MNIST Classification": [[2, "MNIST-Classification"]], "Download MNIST data from TensorFlow": [[2, "Download-MNIST-data-from-TensorFlow"]], "Convert data to a compatible data loader": [[2, "Convert-data-to-a-compatible-data-loader"], [4, "Convert-data-to-a-compatible-data-loader"], [6, "Convert-data-to-a-compatible-data-loader"]], "Build a probabilistic classifier": [[2, "Build-a-probabilistic-classifier"], [6, "Build-a-probabilistic-classifier"]], "Train the probabilistic model: posterior fitting and calibration": [[2, "Train-the-probabilistic-model:-posterior-fitting-and-calibration"], [4, "Train-the-probabilistic-model:-posterior-fitting-and-calibration"], [6, "Train-the-probabilistic-model:-posterior-fitting-and-calibration"]], "Estimate predictive statistics": [[2, "Estimate-predictive-statistics"], [4, "Estimate-predictive-statistics"], [6, "Estimate-predictive-statistics"]], "Compute metrics": [[2, "Compute-metrics"], [4, "Compute-metrics"], [6, "Compute-metrics"], [44, "compute-metrics"], [44, "id6"], [45, "compute-metrics"], [45, "id3"]], "Conformal prediction sets": [[2, "Conformal-prediction-sets"]], "What if we had had model outputs to start from?": [[2, "What-if-we-had-had-model-outputs-to-start-from?"], [4, "What-if-we-had-had-model-outputs-to-start-from?"], [6, "What-if-we-had-had-model-outputs-to-start-from?"]], "Save and load checkpoints": [[3, "save-and-load-checkpoints"]], "Saving a checkpoint": [[3, "saving-a-checkpoint"]], "Restoring a checkpoint for further training": [[3, "restoring-a-checkpoint-for-further-training"]], "Save and load a state of a probabilistic model": [[3, "save-and-load-a-state-of-a-probabilistic-model"]], "Sinusoidal regression": [[4, "Sinusoidal-regression"]], "Generate the data": [[4, "Generate-the-data"]], "Build a probabilistic regressor": [[4, "Build-a-probabilistic-regressor"]], "Conformal intervals": [[4, "Conformal-intervals"]], "Tabular regressions": [[5, "Tabular-regressions"]], "Download regression datasets from UCI": [[5, "Download-regression-datasets-from-UCI"]], "Regression on each data set": [[5, "Regression-on-each-data-set"]], "Two-moons Classification": [[6, "Two-moons-Classification"]], "Download Two-Moons data from scikit-learn": [[6, "Download-Two-Moons-data-from-scikit-learn"]], "Fortuna": [[7, "fortuna"]], "A Library for Uncertainty Quantification": [[7, "a-library-for-uncertainty-quantification"]], "Quickstart": [[7, "quickstart"], [10, "quickstart"]], "Installation": [[7, "installation"], [8, "installation"]], "License": [[7, "license"], [9, "license"]], "Calibration configuration": [[12, "calibration-configuration"]], "Calibration model": [[13, "calibration-model"]], "Predictive distribution": [[14, "predictive-distribution"], [37, "predictive-distribution"]], "Conformer": [[15, "conformer"]], "Data loader": [[16, "data-loader"]], "Metric": [[17, "metric"]], "Built-in models": [[18, "built-in-models"]], "CNN": [[19, "cnn"]], "Flax Linen Module": [[20, "module-flax.linen.Module"]], "Multi-Layer Perceptron (MLP)": [[21, "multi-layer-perceptron-mlp"]], "Model": [[22, "model"]], "Contents:": [[22, null], [41, null]], "Model manager": [[23, "model-manager"]], "ResNet": [[24, "resnet"]], "WideResNet": [[25, "wideresnet"]], "Output calibrator": [[26, "output-calibrator"]], "Plot": [[27, "plot"]], "Posterior fitting configuration": [[28, "posterior-fitting-configuration"]], "Joint distribution": [[29, "joint-distribution"]], "Likelihood function": [[30, "likelihood-function"]], "Automatic Differentiation Variational Inference (ADVI)": [[31, "automatic-differentiation-variational-inference-advi"]], "Deep Ensemble": [[32, "deep-ensemble"]], "Laplace approximation": [[33, "laplace-approximation"]], "Maximum-A-Posteriori (MAP)": [[34, "maximum-a-posteriori-map"]], "Posterior": [[35, "posterior"]], "SWAG": [[36, "swag"]], "Prior distribution": [[38, "prior-distribution"]], "Probabilistic model": [[39, "probabilistic-model"]], "Probabilistic output layer": [[40, "probabilistic-output-layer"]], "API References": [[41, "api-references"]], "Typing": [[42, "typing"]], "Utils": [[43, "utils"]], "From Flax models": [[44, "from-flax-models"]], "Classification": [[44, "classification"], [45, "classification"], [46, "classification"]], "Provide data loaders": [[44, "provide-data-loaders"], [44, "id1"]], "Choose or build a model": [[44, "choose-or-build-a-model"], [44, "id2"]], "Build a probabilistic model": [[44, "build-a-probabilistic-model"], [44, "id3"]], "Train the probabilistic model": [[44, "train-the-probabilistic-model"], [44, "id4"]], "Estimate statistics": [[44, "estimate-statistics"], [44, "id5"], [45, "estimate-statistics"], [45, "id2"]], "Compute conformal sets": [[44, "compute-conformal-sets"], [45, "compute-conformal-sets"]], "Regression": [[44, "regression"], [45, "regression"], [46, "regression"]], "Compute conformal intervals": [[44, "compute-conformal-intervals"], [45, "compute-conformal-intervals"]], "From model outputs": [[45, "from-model-outputs"]], "Build a calibration classifier": [[45, "build-a-calibration-classifier"]], "Calibrate the model outputs": [[45, "calibrate-the-model-outputs"], [45, "id1"]], "Build a calibration regressor": [[45, "build-a-calibration-regressor"]], "From uncertainty estimates": [[46, "from-uncertainty-estimates"]], "Classification example: conformal intervals from probability predictions": [[46, "classification-example-conformal-intervals-from-probability-predictions"]], "Conformal intervals from confidence or credibility intervals": [[46, "conformal-intervals-from-confidence-or-credibility-intervals"]], "Conformal intervals from confidence or scalar uncertainty estimates": [[46, "conformal-intervals-from-confidence-or-scalar-uncertainty-estimates"]], "Usage modes": [[47, "usage-modes"]], "CONTENTS:": [[47, null]]}, "indexentries": {"calibconfig (class in fortuna.calib_config.base)": [[12, "fortuna.calib_config.base.CalibConfig"]], "calibclassifier (class in fortuna.calib_model.classification)": [[13, "fortuna.calib_model.classification.CalibClassifier"]], "calibmodel (class in fortuna.calib_model.base)": [[13, "fortuna.calib_model.base.CalibModel"]], "calibregressor (class in fortuna.calib_model.regression)": [[13, "fortuna.calib_model.regression.CalibRegressor"]], "calibrate() (fortuna.calib_model.base.calibmodel method)": [[13, "fortuna.calib_model.base.CalibModel.calibrate"]], "calibrate() (fortuna.calib_model.classification.calibclassifier method)": [[13, "fortuna.calib_model.classification.CalibClassifier.calibrate"]], "calibrate() (fortuna.calib_model.regression.calibregressor method)": [[13, "fortuna.calib_model.regression.CalibRegressor.calibrate"]], "fortuna.calib_model.base": [[13, "module-fortuna.calib_model.base"]], "fortuna.calib_model.classification": [[13, "module-fortuna.calib_model.classification"]], "fortuna.calib_model.regression": [[13, "module-fortuna.calib_model.regression"]], "load_state() (fortuna.calib_model.base.calibmodel method)": [[13, "fortuna.calib_model.base.CalibModel.load_state"]], "load_state() (fortuna.calib_model.classification.calibclassifier method)": [[13, "fortuna.calib_model.classification.CalibClassifier.load_state"]], "load_state() (fortuna.calib_model.regression.calibregressor method)": [[13, "fortuna.calib_model.regression.CalibRegressor.load_state"]], "module": [[13, "module-fortuna.calib_model.base"], [13, "module-fortuna.calib_model.classification"], [13, "module-fortuna.calib_model.regression"], [14, "module-fortuna.calib_model.predictive.classification"], [14, "module-fortuna.calib_model.predictive.regression"], [15, "module-fortuna.conformer.classification"], [15, "module-fortuna.conformer.regression"], [17, "module-fortuna.metric.classification"], [17, "module-fortuna.metric.regression"], [20, "module-flax.linen.Module"], [23, "module-fortuna.model.model_manager.base"], [23, "module-fortuna.model.model_manager.classification"], [23, "module-fortuna.model.model_manager.regression"], [26, "module-fortuna.output_calibrator.classification"], [26, "module-fortuna.output_calibrator.regression"], [29, "module-fortuna.prob_model.joint.base"], [30, "module-fortuna.prob_model.likelihood.base"], [30, "module-fortuna.prob_model.likelihood.classification"], [30, "module-fortuna.prob_model.likelihood.regression"], [37, "module-fortuna.prob_model.predictive.classification"], [37, "module-fortuna.prob_model.predictive.regression"], [38, "module-fortuna.prob_model.prior.base"], [38, "module-fortuna.prob_model.prior.gaussian"], [39, "module-fortuna.prob_model.base"], [39, "module-fortuna.prob_model.classification"], [39, "module-fortuna.prob_model.regression"], [40, "module-fortuna.prob_output_layer.base"], [40, "module-fortuna.prob_output_layer.classification"], [40, "module-fortuna.prob_output_layer.regression"]], "output_calib_manager (fortuna.calib_model.classification.calibclassifier attribute)": [[13, "fortuna.calib_model.classification.CalibClassifier.output_calib_manager"]], "output_calib_manager (fortuna.calib_model.regression.calibregressor attribute)": [[13, "fortuna.calib_model.regression.CalibRegressor.output_calib_manager"]], "output_calibrator (fortuna.calib_model.classification.calibclassifier attribute)": [[13, "fortuna.calib_model.classification.CalibClassifier.output_calibrator"]], "output_calibrator (fortuna.calib_model.regression.calibregressor attribute)": [[13, "fortuna.calib_model.regression.CalibRegressor.output_calibrator"]], "predictive (fortuna.calib_model.classification.calibclassifier attribute)": [[13, "fortuna.calib_model.classification.CalibClassifier.predictive"]], "predictive (fortuna.calib_model.regression.calibregressor attribute)": [[13, "fortuna.calib_model.regression.CalibRegressor.predictive"]], "prob_output_layer (fortuna.calib_model.classification.calibclassifier attribute)": [[13, "fortuna.calib_model.classification.CalibClassifier.prob_output_layer"]], "prob_output_layer (fortuna.calib_model.regression.calibregressor attribute)": [[13, "fortuna.calib_model.regression.CalibRegressor.prob_output_layer"]], "save_state() (fortuna.calib_model.base.calibmodel method)": [[13, "fortuna.calib_model.base.CalibModel.save_state"]], "save_state() (fortuna.calib_model.classification.calibclassifier method)": [[13, "fortuna.calib_model.classification.CalibClassifier.save_state"]], "save_state() (fortuna.calib_model.regression.calibregressor method)": [[13, "fortuna.calib_model.regression.CalibRegressor.save_state"]], "classificationpredictive (class in fortuna.calib_model.predictive.classification)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive"]], "regressionpredictive (class in fortuna.calib_model.predictive.regression)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive"]], "credible_interval() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.credible_interval"]], "entropy() (fortuna.calib_model.predictive.classification.classificationpredictive method)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.entropy"]], "entropy() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.entropy"]], "fortuna.calib_model.predictive.classification": [[14, "module-fortuna.calib_model.predictive.classification"]], "fortuna.calib_model.predictive.regression": [[14, "module-fortuna.calib_model.predictive.regression"]], "log_prob() (fortuna.calib_model.predictive.classification.classificationpredictive method)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.log_prob"]], "log_prob() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.log_prob"]], "mean() (fortuna.calib_model.predictive.classification.classificationpredictive method)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.mean"]], "mean() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.mean"]], "mode() (fortuna.calib_model.predictive.classification.classificationpredictive method)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.mode"]], "mode() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.mode"]], "quantile() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.quantile"]], "rng (fortuna.calib_model.predictive.classification.classificationpredictive property)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.rng"]], "rng (fortuna.calib_model.predictive.regression.regressionpredictive property)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.rng"]], "sample() (fortuna.calib_model.predictive.classification.classificationpredictive method)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.sample"]], "sample() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.sample"]], "std() (fortuna.calib_model.predictive.classification.classificationpredictive method)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.std"]], "std() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.std"]], "variance() (fortuna.calib_model.predictive.classification.classificationpredictive method)": [[14, "fortuna.calib_model.predictive.classification.ClassificationPredictive.variance"]], "variance() (fortuna.calib_model.predictive.regression.regressionpredictive method)": [[14, "fortuna.calib_model.predictive.regression.RegressionPredictive.variance"]], "adaptivepredictionconformalclassifier (class in fortuna.conformer.classification)": [[15, "fortuna.conformer.classification.AdaptivePredictionConformalClassifier"]], "onedimensionaluncertaintyconformalregressor (class in fortuna.conformer.regression)": [[15, "fortuna.conformer.regression.OneDimensionalUncertaintyConformalRegressor"]], "quantileconformalregressor (class in fortuna.conformer.regression)": [[15, "fortuna.conformer.regression.QuantileConformalRegressor"]], "simplepredictionconformalclassifier (class in fortuna.conformer.classification)": [[15, "fortuna.conformer.classification.SimplePredictionConformalClassifier"]], "conformal_interval() (fortuna.conformer.regression.onedimensionaluncertaintyconformalregressor method)": [[15, "fortuna.conformer.regression.OneDimensionalUncertaintyConformalRegressor.conformal_interval"]], "conformal_interval() (fortuna.conformer.regression.quantileconformalregressor method)": [[15, "fortuna.conformer.regression.QuantileConformalRegressor.conformal_interval"]], "conformal_set() (fortuna.conformer.classification.adaptivepredictionconformalclassifier method)": [[15, "fortuna.conformer.classification.AdaptivePredictionConformalClassifier.conformal_set"]], "conformal_set() (fortuna.conformer.classification.simplepredictionconformalclassifier method)": [[15, "fortuna.conformer.classification.SimplePredictionConformalClassifier.conformal_set"]], "fortuna.conformer.classification": [[15, "module-fortuna.conformer.classification"]], "fortuna.conformer.regression": [[15, "module-fortuna.conformer.regression"]], "quantile() (fortuna.conformer.classification.adaptivepredictionconformalclassifier method)": [[15, "fortuna.conformer.classification.AdaptivePredictionConformalClassifier.quantile"]], "quantile() (fortuna.conformer.classification.simplepredictionconformalclassifier method)": [[15, "fortuna.conformer.classification.SimplePredictionConformalClassifier.quantile"]], "quantile() (fortuna.conformer.regression.onedimensionaluncertaintyconformalregressor method)": [[15, "fortuna.conformer.regression.OneDimensionalUncertaintyConformalRegressor.quantile"]], "quantile() (fortuna.conformer.regression.quantileconformalregressor method)": [[15, "fortuna.conformer.regression.QuantileConformalRegressor.quantile"]], "score() (fortuna.conformer.classification.adaptivepredictionconformalclassifier method)": [[15, "fortuna.conformer.classification.AdaptivePredictionConformalClassifier.score"]], "score() (fortuna.conformer.classification.simplepredictionconformalclassifier method)": [[15, "fortuna.conformer.classification.SimplePredictionConformalClassifier.score"]], "score() (fortuna.conformer.regression.onedimensionaluncertaintyconformalregressor method)": [[15, "fortuna.conformer.regression.OneDimensionalUncertaintyConformalRegressor.score"]], "score() (fortuna.conformer.regression.quantileconformalregressor method)": [[15, "fortuna.conformer.regression.QuantileConformalRegressor.score"]], "dataloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.DataLoader"]], "fromarraydatatodataloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.FromArrayDataToDataLoader"]], "fromarrayinputstoinputsloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.FromArrayInputsToInputsLoader"]], "fromarraytargetstotargetsloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.FromArrayTargetsToTargetsLoader"]], "fromcallableiterabletodataloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.FromCallableIterableToDataLoader"]], "fromdataloadertoinputsloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.FromDataLoaderToInputsLoader"]], "fromdataloadertotargetsloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.FromDataLoaderToTargetsLoader"]], "fromiterabletodataloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.FromIterableToDataLoader"]], "inputsloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.InputsLoader"]], "targetsloader (class in fortuna.data.loader)": [[16, "fortuna.data.loader.TargetsLoader"]], "from_array_data() (fortuna.data.loader.dataloader class method)": [[16, "fortuna.data.loader.DataLoader.from_array_data"]], "from_array_inputs() (fortuna.data.loader.inputsloader class method)": [[16, "fortuna.data.loader.InputsLoader.from_array_inputs"]], "from_array_targets() (fortuna.data.loader.targetsloader class method)": [[16, "fortuna.data.loader.TargetsLoader.from_array_targets"]], "from_callable_iterable() (fortuna.data.loader.dataloader class method)": [[16, "fortuna.data.loader.DataLoader.from_callable_iterable"]], "from_data_loader() (fortuna.data.loader.inputsloader class method)": [[16, "fortuna.data.loader.InputsLoader.from_data_loader"]], "from_data_loader() (fortuna.data.loader.targetsloader class method)": [[16, "fortuna.data.loader.TargetsLoader.from_data_loader"]], "from_iterable() (fortuna.data.loader.dataloader class method)": [[16, "fortuna.data.loader.DataLoader.from_iterable"]], "from_tensorflow_data_loader() (fortuna.data.loader.dataloader class method)": [[16, "fortuna.data.loader.DataLoader.from_tensorflow_data_loader"]], "from_torch_data_loader() (fortuna.data.loader.dataloader class method)": [[16, "fortuna.data.loader.DataLoader.from_torch_data_loader"]], "to_array_data() (fortuna.data.loader.dataloader method)": [[16, "fortuna.data.loader.DataLoader.to_array_data"]], "to_array_inputs() (fortuna.data.loader.dataloader method)": [[16, "fortuna.data.loader.DataLoader.to_array_inputs"]], "to_array_inputs() (fortuna.data.loader.inputsloader method)": [[16, "fortuna.data.loader.InputsLoader.to_array_inputs"]], "to_array_targets() (fortuna.data.loader.dataloader method)": [[16, "fortuna.data.loader.DataLoader.to_array_targets"]], "to_array_targets() (fortuna.data.loader.targetsloader method)": [[16, "fortuna.data.loader.TargetsLoader.to_array_targets"]], "to_inputs_loader() (fortuna.data.loader.dataloader method)": [[16, "fortuna.data.loader.DataLoader.to_inputs_loader"]], "to_targets_loader() (fortuna.data.loader.dataloader method)": [[16, "fortuna.data.loader.DataLoader.to_targets_loader"]], "accuracy() (in module fortuna.metric.classification)": [[17, "fortuna.metric.classification.accuracy"]], "brier_score() (in module fortuna.metric.classification)": [[17, "fortuna.metric.classification.brier_score"]], "ece() (in module fortuna.metric.classification)": [[17, "fortuna.metric.classification.ece"]], "expected_calibration_error() (in module fortuna.metric.classification)": [[17, "fortuna.metric.classification.expected_calibration_error"]], "fortuna.metric.classification": [[17, "module-fortuna.metric.classification"]], "fortuna.metric.regression": [[17, "module-fortuna.metric.regression"]], "mae() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.mae"]], "maximum_calibration_error() (in module fortuna.metric.classification)": [[17, "fortuna.metric.classification.maximum_calibration_error"]], "mce() (in module fortuna.metric.classification)": [[17, "fortuna.metric.classification.mce"]], "mean_absolute_error() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.mean_absolute_error"]], "mean_squared_error() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.mean_squared_error"]], "mse() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.mse"]], "picp() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.picp"]], "prediction_interval_coverage_probability() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.prediction_interval_coverage_probability"]], "rmae() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.rmae"]], "rmse() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.rmse"]], "root_mean_absolute_error() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.root_mean_absolute_error"]], "root_mean_squared_error() (in module fortuna.metric.regression)": [[17, "fortuna.metric.regression.root_mean_squared_error"]], "lenet5 (class in fortuna.model.lenet)": [[19, "fortuna.model.lenet.LeNet5"]], "dtype (fortuna.model.lenet.lenet5 attribute)": [[19, "fortuna.model.lenet.LeNet5.dtype"]], "output_dim (fortuna.model.lenet.lenet5 attribute)": [[19, "fortuna.model.lenet.LeNet5.output_dim"]], "flax.linen.module": [[20, "module-flax.linen.Module"]], "mlp (class in fortuna.model.mlp)": [[21, "fortuna.model.mlp.MLP"]], "classificationmodelmanager (class in fortuna.model.model_manager.classification)": [[23, "fortuna.model.model_manager.classification.ClassificationModelManager"]], "modelmanager (class in fortuna.model.model_manager.base)": [[23, "fortuna.model.model_manager.base.ModelManager"]], "modelmanagerstate (class in fortuna.model.model_manager.state)": [[23, "fortuna.model.model_manager.state.ModelManagerState"]], "regressionmodelmanager (class in fortuna.model.model_manager.regression)": [[23, "fortuna.model.model_manager.regression.RegressionModelManager"]], "apply() (fortuna.model.model_manager.base.modelmanager method)": [[23, "fortuna.model.model_manager.base.ModelManager.apply"]], "apply() (fortuna.model.model_manager.classification.classificationmodelmanager method)": [[23, "fortuna.model.model_manager.classification.ClassificationModelManager.apply"]], "apply() (fortuna.model.model_manager.regression.regressionmodelmanager method)": [[23, "fortuna.model.model_manager.regression.RegressionModelManager.apply"]], "fortuna.model.model_manager.base": [[23, "module-fortuna.model.model_manager.base"]], "fortuna.model.model_manager.classification": [[23, "module-fortuna.model.model_manager.classification"]], "fortuna.model.model_manager.regression": [[23, "module-fortuna.model.model_manager.regression"]], "init() (fortuna.model.model_manager.base.modelmanager method)": [[23, "fortuna.model.model_manager.base.ModelManager.init"]], "init() (fortuna.model.model_manager.classification.classificationmodelmanager method)": [[23, "fortuna.model.model_manager.classification.ClassificationModelManager.init"]], "init() (fortuna.model.model_manager.regression.regressionmodelmanager method)": [[23, "fortuna.model.model_manager.regression.RegressionModelManager.init"]], "init_from_dict() (fortuna.model.model_manager.state.modelmanagerstate class method)": [[23, "fortuna.model.model_manager.state.ModelManagerState.init_from_dict"]], "rng (fortuna.model.model_manager.base.modelmanager property)": [[23, "fortuna.model.model_manager.base.ModelManager.rng"]], "rng (fortuna.model.model_manager.classification.classificationmodelmanager property)": [[23, "fortuna.model.model_manager.classification.ClassificationModelManager.rng"]], "rng (fortuna.model.model_manager.regression.regressionmodelmanager property)": [[23, "fortuna.model.model_manager.regression.RegressionModelManager.rng"]], "resnet (class in fortuna.model.resnet)": [[24, "fortuna.model.resnet.ResNet"]], "resnet101 (in module fortuna.model.resnet)": [[24, "fortuna.model.resnet.ResNet101"]], "resnet152 (in module fortuna.model.resnet)": [[24, "fortuna.model.resnet.ResNet152"]], "resnet18 (in module fortuna.model.resnet)": [[24, "fortuna.model.resnet.ResNet18"]], "resnet200 (in module fortuna.model.resnet)": [[24, "fortuna.model.resnet.ResNet200"]], "resnet34 (in module fortuna.model.resnet)": [[24, "fortuna.model.resnet.ResNet34"]], "resnet50 (in module fortuna.model.resnet)": [[24, "fortuna.model.resnet.ResNet50"]], "activation (fortuna.model.resnet.resnet attribute)": [[24, "fortuna.model.resnet.ResNet.activation"]], "block_cls (fortuna.model.resnet.resnet attribute)": [[24, "fortuna.model.resnet.ResNet.block_cls"]], "conv (fortuna.model.resnet.resnet attribute)": [[24, "fortuna.model.resnet.ResNet.conv"]], "dtype (fortuna.model.resnet.resnet attribute)": [[24, "fortuna.model.resnet.ResNet.dtype"]], "num_filters (fortuna.model.resnet.resnet attribute)": [[24, "fortuna.model.resnet.ResNet.num_filters"]], "output_dim (fortuna.model.resnet.resnet attribute)": [[24, "fortuna.model.resnet.ResNet.output_dim"]], "stage_sizes (fortuna.model.resnet.resnet attribute)": [[24, "fortuna.model.resnet.ResNet.stage_sizes"]], "wideresnet (class in fortuna.model.wideresnet)": [[25, "fortuna.model.wideresnet.WideResNet"]], "wideresnet28_10 (in module fortuna.model.wideresnet)": [[25, "fortuna.model.wideresnet.WideResNet28_10"]], "activation (fortuna.model.wideresnet.wideresnet attribute)": [[25, "fortuna.model.wideresnet.WideResNet.activation"]], "conv (fortuna.model.wideresnet.wideresnet attribute)": [[25, "fortuna.model.wideresnet.WideResNet.conv"]], "depth (fortuna.model.wideresnet.wideresnet attribute)": [[25, "fortuna.model.wideresnet.WideResNet.depth"]], "dropout_rate (fortuna.model.wideresnet.wideresnet attribute)": [[25, "fortuna.model.wideresnet.WideResNet.dropout_rate"]], "dtype (fortuna.model.wideresnet.wideresnet attribute)": [[25, "fortuna.model.wideresnet.WideResNet.dtype"]], "output_dim (fortuna.model.wideresnet.wideresnet attribute)": [[25, "fortuna.model.wideresnet.WideResNet.output_dim"]], "widen_factor (fortuna.model.wideresnet.wideresnet attribute)": [[25, "fortuna.model.wideresnet.WideResNet.widen_factor"]], "calibstate (class in fortuna.training.calib_state)": [[26, "fortuna.training.calib_state.CalibState"]], "classificationtemperaturescaler (class in fortuna.output_calibrator.classification)": [[26, "fortuna.output_calibrator.classification.ClassificationTemperatureScaler"]], "regressiontemperaturescaler (class in fortuna.output_calibrator.regression)": [[26, "fortuna.output_calibrator.regression.RegressionTemperatureScaler"]], "fortuna.output_calibrator.classification": [[26, "module-fortuna.output_calibrator.classification"]], "fortuna.output_calibrator.regression": [[26, "module-fortuna.output_calibrator.regression"]], "init() (fortuna.training.calib_state.calibstate class method)": [[26, "fortuna.training.calib_state.CalibState.init"]], "init_from_dict() (fortuna.training.calib_state.calibstate class method)": [[26, "fortuna.training.calib_state.CalibState.init_from_dict"]], "name (fortuna.output_calibrator.classification.classificationtemperaturescaler attribute)": [[26, "fortuna.output_calibrator.classification.ClassificationTemperatureScaler.name"]], "name (fortuna.output_calibrator.regression.regressiontemperaturescaler attribute)": [[26, "fortuna.output_calibrator.regression.RegressionTemperatureScaler.name"]], "parent (fortuna.output_calibrator.classification.classificationtemperaturescaler attribute)": [[26, "fortuna.output_calibrator.classification.ClassificationTemperatureScaler.parent"]], "parent (fortuna.output_calibrator.regression.regressiontemperaturescaler attribute)": [[26, "fortuna.output_calibrator.regression.RegressionTemperatureScaler.parent"]], "scope (fortuna.output_calibrator.classification.classificationtemperaturescaler attribute)": [[26, "fortuna.output_calibrator.classification.ClassificationTemperatureScaler.scope"]], "scope (fortuna.output_calibrator.regression.regressiontemperaturescaler attribute)": [[26, "fortuna.output_calibrator.regression.RegressionTemperatureScaler.scope"]], "plot_reliability_diagram() (in module fortuna.plot)": [[27, "fortuna.plot.plot_reliability_diagram"]], "fitcheckpointer (class in fortuna.prob_model.fit_config.checkpointer)": [[28, "fortuna.prob_model.fit_config.checkpointer.FitCheckpointer"]], "fitconfig (class in fortuna.prob_model.fit_config.base)": [[28, "fortuna.prob_model.fit_config.base.FitConfig"]], "fitmonitor (class in fortuna.prob_model.fit_config.monitor)": [[28, "fortuna.prob_model.fit_config.monitor.FitMonitor"]], "fitoptimizer (class in fortuna.prob_model.fit_config.optimizer)": [[28, "fortuna.prob_model.fit_config.optimizer.FitOptimizer"]], "fitprocessor (class in fortuna.prob_model.fit_config.processor)": [[28, "fortuna.prob_model.fit_config.processor.FitProcessor"]], "joint (class in fortuna.prob_model.joint.base)": [[29, "fortuna.prob_model.joint.base.Joint"]], "jointstate (class in fortuna.prob_model.joint.state)": [[29, "fortuna.prob_model.joint.state.JointState"]], "batched_log_prob() (fortuna.prob_model.joint.base.joint method)": [[29, "fortuna.prob_model.joint.base.Joint.batched_log_prob"]], "fortuna.prob_model.joint.base": [[29, "module-fortuna.prob_model.joint.base"]], "init() (fortuna.prob_model.joint.base.joint method)": [[29, "fortuna.prob_model.joint.base.Joint.init"]], "init_from_states() (fortuna.prob_model.joint.state.jointstate class method)": [[29, "fortuna.prob_model.joint.state.JointState.init_from_states"]], "log_prob() (fortuna.prob_model.joint.base.joint method)": [[29, "fortuna.prob_model.joint.base.Joint.log_prob"]], "rng (fortuna.prob_model.joint.base.joint property)": [[29, "fortuna.prob_model.joint.base.Joint.rng"]], "classificationlikelihood (class in fortuna.prob_model.likelihood.classification)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood"]], "likelihood (class in fortuna.prob_model.likelihood.base)": [[30, "fortuna.prob_model.likelihood.base.Likelihood"]], "regressionlikelihood (class in fortuna.prob_model.likelihood.regression)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood"]], "entropy() (fortuna.prob_model.likelihood.base.likelihood method)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.entropy"]], "entropy() (fortuna.prob_model.likelihood.classification.classificationlikelihood method)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.entropy"]], "entropy() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.entropy"]], "fortuna.prob_model.likelihood.base": [[30, "module-fortuna.prob_model.likelihood.base"]], "fortuna.prob_model.likelihood.classification": [[30, "module-fortuna.prob_model.likelihood.classification"]], "fortuna.prob_model.likelihood.regression": [[30, "module-fortuna.prob_model.likelihood.regression"]], "log_prob() (fortuna.prob_model.likelihood.base.likelihood method)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.log_prob"]], "log_prob() (fortuna.prob_model.likelihood.classification.classificationlikelihood method)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.log_prob"]], "log_prob() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.log_prob"]], "mean() (fortuna.prob_model.likelihood.base.likelihood method)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.mean"]], "mean() (fortuna.prob_model.likelihood.classification.classificationlikelihood method)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.mean"]], "mean() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.mean"]], "mode() (fortuna.prob_model.likelihood.base.likelihood method)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.mode"]], "mode() (fortuna.prob_model.likelihood.classification.classificationlikelihood method)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.mode"]], "mode() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.mode"]], "quantile() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.quantile"]], "rng (fortuna.prob_model.likelihood.base.likelihood property)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.rng"]], "rng (fortuna.prob_model.likelihood.classification.classificationlikelihood property)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.rng"]], "rng (fortuna.prob_model.likelihood.regression.regressionlikelihood property)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.rng"]], "sample() (fortuna.prob_model.likelihood.base.likelihood method)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.sample"]], "sample() (fortuna.prob_model.likelihood.classification.classificationlikelihood method)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.sample"]], "sample() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.sample"]], "std() (fortuna.prob_model.likelihood.base.likelihood method)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.std"]], "std() (fortuna.prob_model.likelihood.classification.classificationlikelihood method)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.std"]], "std() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.std"]], "variance() (fortuna.prob_model.likelihood.base.likelihood method)": [[30, "fortuna.prob_model.likelihood.base.Likelihood.variance"]], "variance() (fortuna.prob_model.likelihood.classification.classificationlikelihood method)": [[30, "fortuna.prob_model.likelihood.classification.ClassificationLikelihood.variance"]], "variance() (fortuna.prob_model.likelihood.regression.regressionlikelihood method)": [[30, "fortuna.prob_model.likelihood.regression.RegressionLikelihood.variance"]], "adviposterior (class in fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior.ADVIPosterior"]], "adviposteriorapproximator (class in fortuna.prob_model.posterior.normalizing_flow.advi.advi_approximator)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_approximator.ADVIPosteriorApproximator"]], "advistate (class in fortuna.prob_model.posterior.normalizing_flow.advi.advi_state)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.ADVIState"]], "convert_from_map_state() (fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.advistate class method)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.ADVIState.convert_from_map_state"]], "encoded_name (fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.advistate attribute)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.ADVIState.encoded_name"]], "fit() (fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior.adviposterior method)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior.ADVIPosterior.fit"]], "init() (fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.advistate class method)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.ADVIState.init"]], "init_from_dict() (fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.advistate class method)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_state.ADVIState.init_from_dict"]], "sample() (fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior.adviposterior method)": [[31, "fortuna.prob_model.posterior.normalizing_flow.advi.advi_posterior.ADVIPosterior.sample"]], "deepensembleposterior (class in fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior)": [[32, "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.DeepEnsemblePosterior"]], "deepensembleposteriorapproximator (class in fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_approximator)": [[32, "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_approximator.DeepEnsemblePosteriorApproximator"]], "fit() (fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.deepensembleposterior method)": [[32, "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.DeepEnsemblePosterior.fit"]], "load_state() (fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.deepensembleposterior method)": [[32, "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.DeepEnsemblePosterior.load_state"]], "sample() (fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.deepensembleposterior method)": [[32, "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.DeepEnsemblePosterior.sample"]], "save_state() (fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.deepensembleposterior method)": [[32, "fortuna.prob_model.posterior.deep_ensemble.deep_ensemble_posterior.DeepEnsemblePosterior.save_state"]], "laplaceposterior (class in fortuna.prob_model.posterior.laplace.laplace_posterior)": [[33, "fortuna.prob_model.posterior.laplace.laplace_posterior.LaplacePosterior"]], "laplaceposteriorapproximator (class in fortuna.prob_model.posterior.laplace.laplace_approximator)": [[33, "fortuna.prob_model.posterior.laplace.laplace_approximator.LaplacePosteriorApproximator"]], "laplacestate (class in fortuna.prob_model.posterior.laplace.laplace_state)": [[33, "fortuna.prob_model.posterior.laplace.laplace_state.LaplaceState"]], "convert_from_map_state() (fortuna.prob_model.posterior.laplace.laplace_state.laplacestate class method)": [[33, "fortuna.prob_model.posterior.laplace.laplace_state.LaplaceState.convert_from_map_state"]], "encoded_name (fortuna.prob_model.posterior.laplace.laplace_state.laplacestate attribute)": [[33, "fortuna.prob_model.posterior.laplace.laplace_state.LaplaceState.encoded_name"]], "fit() (fortuna.prob_model.posterior.laplace.laplace_posterior.laplaceposterior method)": [[33, "fortuna.prob_model.posterior.laplace.laplace_posterior.LaplacePosterior.fit"]], "init() (fortuna.prob_model.posterior.laplace.laplace_state.laplacestate class method)": [[33, "fortuna.prob_model.posterior.laplace.laplace_state.LaplaceState.init"]], "init_from_dict() (fortuna.prob_model.posterior.laplace.laplace_state.laplacestate class method)": [[33, "fortuna.prob_model.posterior.laplace.laplace_state.LaplaceState.init_from_dict"]], "sample() (fortuna.prob_model.posterior.laplace.laplace_posterior.laplaceposterior method)": [[33, "fortuna.prob_model.posterior.laplace.laplace_posterior.LaplacePosterior.sample"]], "mapposterior (class in fortuna.prob_model.posterior.map.map_posterior)": [[34, "fortuna.prob_model.posterior.map.map_posterior.MAPPosterior"]], "mapposteriorapproximator (class in fortuna.prob_model.posterior.map.map_approximator)": [[34, "fortuna.prob_model.posterior.map.map_approximator.MAPPosteriorApproximator"]], "mapstate (class in fortuna.prob_model.posterior.map.map_state)": [[34, "fortuna.prob_model.posterior.map.map_state.MAPState"]], "encoded_name (fortuna.prob_model.posterior.map.map_state.mapstate attribute)": [[34, "fortuna.prob_model.posterior.map.map_state.MAPState.encoded_name"]], "fit() (fortuna.prob_model.posterior.map.map_posterior.mapposterior method)": [[34, "fortuna.prob_model.posterior.map.map_posterior.MAPPosterior.fit"]], "init() (fortuna.prob_model.posterior.map.map_state.mapstate class method)": [[34, "fortuna.prob_model.posterior.map.map_state.MAPState.init"]], "init_from_dict() (fortuna.prob_model.posterior.map.map_state.mapstate class method)": [[34, "fortuna.prob_model.posterior.map.map_state.MAPState.init_from_dict"]], "sample() (fortuna.prob_model.posterior.map.map_posterior.mapposterior method)": [[34, "fortuna.prob_model.posterior.map.map_posterior.MAPPosterior.sample"]], "posterior (class in fortuna.prob_model.posterior.base)": [[35, "fortuna.prob_model.posterior.base.Posterior"]], "posteriorapproximator (class in fortuna.prob_model.posterior.base)": [[35, "fortuna.prob_model.posterior.base.PosteriorApproximator"]], "posteriorstate (class in fortuna.prob_model.posterior.state)": [[35, "fortuna.prob_model.posterior.state.PosteriorState"]], "fit() (fortuna.prob_model.posterior.base.posterior method)": [[35, "fortuna.prob_model.posterior.base.Posterior.fit"]], "init() (fortuna.prob_model.posterior.state.posteriorstate class method)": [[35, "fortuna.prob_model.posterior.state.PosteriorState.init"]], "init_from_dict() (fortuna.prob_model.posterior.state.posteriorstate class method)": [[35, "fortuna.prob_model.posterior.state.PosteriorState.init_from_dict"]], "load_state() (fortuna.prob_model.posterior.base.posterior method)": [[35, "fortuna.prob_model.posterior.base.Posterior.load_state"]], "sample() (fortuna.prob_model.posterior.base.posterior method)": [[35, "fortuna.prob_model.posterior.base.Posterior.sample"]], "save_state() (fortuna.prob_model.posterior.base.posterior method)": [[35, "fortuna.prob_model.posterior.base.Posterior.save_state"]], "swagposterior (class in fortuna.prob_model.posterior.swag.swag_posterior)": [[36, "fortuna.prob_model.posterior.swag.swag_posterior.SWAGPosterior"]], "swagposteriorapproximator (class in fortuna.prob_model.posterior.swag.swag_approximator)": [[36, "fortuna.prob_model.posterior.swag.swag_approximator.SWAGPosteriorApproximator"]], "swagstate (class in fortuna.prob_model.posterior.swag.swag_state)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState"]], "convert_from_map_state() (fortuna.prob_model.posterior.swag.swag_state.swagstate class method)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.convert_from_map_state"]], "dev (fortuna.prob_model.posterior.swag.swag_state.swagstate attribute)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.dev"]], "encoded_name (fortuna.prob_model.posterior.swag.swag_state.swagstate attribute)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.encoded_name"]], "fit() (fortuna.prob_model.posterior.swag.swag_posterior.swagposterior method)": [[36, "fortuna.prob_model.posterior.swag.swag_posterior.SWAGPosterior.fit"]], "init() (fortuna.prob_model.posterior.swag.swag_state.swagstate class method)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.init"]], "init_from_dict() (fortuna.prob_model.posterior.swag.swag_state.swagstate class method)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.init_from_dict"]], "mean (fortuna.prob_model.posterior.swag.swag_state.swagstate attribute)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.mean"]], "sample() (fortuna.prob_model.posterior.swag.swag_posterior.swagposterior method)": [[36, "fortuna.prob_model.posterior.swag.swag_posterior.SWAGPosterior.sample"]], "std (fortuna.prob_model.posterior.swag.swag_state.swagstate attribute)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.std"]], "update() (fortuna.prob_model.posterior.swag.swag_state.swagstate method)": [[36, "fortuna.prob_model.posterior.swag.swag_state.SWAGState.update"]], "classificationpredictive (class in fortuna.prob_model.predictive.classification)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive"]], "regressionpredictive (class in fortuna.prob_model.predictive.regression)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive"]], "aleatoric_entropy() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.aleatoric_entropy"]], "aleatoric_entropy() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.aleatoric_entropy"]], "aleatoric_variance() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.aleatoric_variance"]], "aleatoric_variance() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.aleatoric_variance"]], "credible_interval() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.credible_interval"]], "entropy() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.entropy"]], "entropy() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.entropy"]], "epistemic_entropy() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.epistemic_entropy"]], "epistemic_entropy() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.epistemic_entropy"]], "epistemic_variance() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.epistemic_variance"]], "epistemic_variance() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.epistemic_variance"]], "fortuna.prob_model.predictive.classification": [[37, "module-fortuna.prob_model.predictive.classification"]], "fortuna.prob_model.predictive.regression": [[37, "module-fortuna.prob_model.predictive.regression"]], "log_prob() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.log_prob"]], "log_prob() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.log_prob"]], "mean() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.mean"]], "mean() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.mean"]], "mode() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.mode"]], "mode() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.mode"]], "quantile() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.quantile"]], "rng (fortuna.prob_model.predictive.classification.classificationpredictive property)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.rng"]], "rng (fortuna.prob_model.predictive.regression.regressionpredictive property)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.rng"]], "sample() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.sample"]], "sample() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.sample"]], "std() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.std"]], "std() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.std"]], "variance() (fortuna.prob_model.predictive.classification.classificationpredictive method)": [[37, "fortuna.prob_model.predictive.classification.ClassificationPredictive.variance"]], "variance() (fortuna.prob_model.predictive.regression.regressionpredictive method)": [[37, "fortuna.prob_model.predictive.regression.RegressionPredictive.variance"]], "diagonalgaussianprior (class in fortuna.prob_model.prior.gaussian)": [[38, "fortuna.prob_model.prior.gaussian.DiagonalGaussianPrior"]], "isotropicgaussianprior (class in fortuna.prob_model.prior.gaussian)": [[38, "fortuna.prob_model.prior.gaussian.IsotropicGaussianPrior"]], "prior (class in fortuna.prob_model.prior.base)": [[38, "fortuna.prob_model.prior.base.Prior"]], "fortuna.prob_model.prior.base": [[38, "module-fortuna.prob_model.prior.base"]], "fortuna.prob_model.prior.gaussian": [[38, "module-fortuna.prob_model.prior.gaussian"]], "log_prob() (fortuna.prob_model.prior.base.prior method)": [[38, "fortuna.prob_model.prior.base.Prior.log_prob"]], "log_prob() (fortuna.prob_model.prior.gaussian.diagonalgaussianprior method)": [[38, "fortuna.prob_model.prior.gaussian.DiagonalGaussianPrior.log_prob"]], "log_prob() (fortuna.prob_model.prior.gaussian.isotropicgaussianprior method)": [[38, "fortuna.prob_model.prior.gaussian.IsotropicGaussianPrior.log_prob"]], "rng (fortuna.prob_model.prior.base.prior property)": [[38, "fortuna.prob_model.prior.base.Prior.rng"]], "rng (fortuna.prob_model.prior.gaussian.diagonalgaussianprior property)": [[38, "fortuna.prob_model.prior.gaussian.DiagonalGaussianPrior.rng"]], "rng (fortuna.prob_model.prior.gaussian.isotropicgaussianprior property)": [[38, "fortuna.prob_model.prior.gaussian.IsotropicGaussianPrior.rng"]], "sample() (fortuna.prob_model.prior.base.prior method)": [[38, "fortuna.prob_model.prior.base.Prior.sample"]], "sample() (fortuna.prob_model.prior.gaussian.diagonalgaussianprior method)": [[38, "fortuna.prob_model.prior.gaussian.DiagonalGaussianPrior.sample"]], "sample() (fortuna.prob_model.prior.gaussian.isotropicgaussianprior method)": [[38, "fortuna.prob_model.prior.gaussian.IsotropicGaussianPrior.sample"]], "probclassifier (class in fortuna.prob_model.classification)": [[39, "fortuna.prob_model.classification.ProbClassifier"]], "probmodel (class in fortuna.prob_model.base)": [[39, "fortuna.prob_model.base.ProbModel"]], "probregressor (class in fortuna.prob_model.regression)": [[39, "fortuna.prob_model.regression.ProbRegressor"]], "calibrate() (fortuna.prob_model.base.probmodel method)": [[39, "fortuna.prob_model.base.ProbModel.calibrate"]], "calibrate() (fortuna.prob_model.classification.probclassifier method)": [[39, "fortuna.prob_model.classification.ProbClassifier.calibrate"]], "calibrate() (fortuna.prob_model.regression.probregressor method)": [[39, "fortuna.prob_model.regression.ProbRegressor.calibrate"]], "fortuna.prob_model.base": [[39, "module-fortuna.prob_model.base"]], "fortuna.prob_model.classification": [[39, "module-fortuna.prob_model.classification"]], "fortuna.prob_model.regression": [[39, "module-fortuna.prob_model.regression"]], "joint (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.joint"]], "joint (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.joint"]], "likelihood (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.likelihood"]], "likelihood (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.likelihood"]], "load_state() (fortuna.prob_model.base.probmodel method)": [[39, "fortuna.prob_model.base.ProbModel.load_state"]], "load_state() (fortuna.prob_model.classification.probclassifier method)": [[39, "fortuna.prob_model.classification.ProbClassifier.load_state"]], "load_state() (fortuna.prob_model.regression.probregressor method)": [[39, "fortuna.prob_model.regression.ProbRegressor.load_state"]], "model (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.model"]], "model (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.model"]], "model_manager (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.model_manager"]], "model_manager (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.model_manager"]], "output_calibrator (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.output_calibrator"]], "output_calibrator (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.output_calibrator"]], "posterior (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.posterior"]], "posterior (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.posterior"]], "posterior_approximator (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.posterior_approximator"]], "posterior_approximator (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.posterior_approximator"]], "predictive (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.predictive"]], "predictive (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.predictive"]], "prior (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.prior"]], "prior (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.prior"]], "prob_output_layer (fortuna.prob_model.classification.probclassifier attribute)": [[39, "fortuna.prob_model.classification.ProbClassifier.prob_output_layer"]], "prob_output_layer (fortuna.prob_model.regression.probregressor attribute)": [[39, "fortuna.prob_model.regression.ProbRegressor.prob_output_layer"]], "save_state() (fortuna.prob_model.base.probmodel method)": [[39, "fortuna.prob_model.base.ProbModel.save_state"]], "save_state() (fortuna.prob_model.classification.probclassifier method)": [[39, "fortuna.prob_model.classification.ProbClassifier.save_state"]], "save_state() (fortuna.prob_model.regression.probregressor method)": [[39, "fortuna.prob_model.regression.ProbRegressor.save_state"]], "train() (fortuna.prob_model.base.probmodel method)": [[39, "fortuna.prob_model.base.ProbModel.train"]], "train() (fortuna.prob_model.classification.probclassifier method)": [[39, "fortuna.prob_model.classification.ProbClassifier.train"]], "train() (fortuna.prob_model.regression.probregressor method)": [[39, "fortuna.prob_model.regression.ProbRegressor.train"]], "classificationproboutputlayer (class in fortuna.prob_output_layer.classification)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer"]], "proboutputlayer (class in fortuna.prob_output_layer.base)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer"]], "regressionproboutputlayer (class in fortuna.prob_output_layer.regression)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer"]], "credible_interval() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.credible_interval"]], "entropy() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.entropy"]], "entropy() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.entropy"]], "entropy() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.entropy"]], "fortuna.prob_output_layer.base": [[40, "module-fortuna.prob_output_layer.base"]], "fortuna.prob_output_layer.classification": [[40, "module-fortuna.prob_output_layer.classification"]], "fortuna.prob_output_layer.regression": [[40, "module-fortuna.prob_output_layer.regression"]], "log_prob() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.log_prob"]], "log_prob() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.log_prob"]], "log_prob() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.log_prob"]], "mean() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.mean"]], "mean() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.mean"]], "mean() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.mean"]], "mode() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.mode"]], "mode() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.mode"]], "mode() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.mode"]], "predict() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.predict"]], "predict() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.predict"]], "predict() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.predict"]], "quantile() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.quantile"]], "rng (fortuna.prob_output_layer.base.proboutputlayer property)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.rng"]], "rng (fortuna.prob_output_layer.classification.classificationproboutputlayer property)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.rng"]], "rng (fortuna.prob_output_layer.regression.regressionproboutputlayer property)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.rng"]], "sample() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.sample"]], "sample() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.sample"]], "sample() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.sample"]], "std() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.std"]], "std() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.std"]], "std() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.std"]], "variance() (fortuna.prob_output_layer.base.proboutputlayer method)": [[40, "fortuna.prob_output_layer.base.ProbOutputLayer.variance"]], "variance() (fortuna.prob_output_layer.classification.classificationproboutputlayer method)": [[40, "fortuna.prob_output_layer.classification.ClassificationProbOutputLayer.variance"]], "variance() (fortuna.prob_output_layer.regression.regressionproboutputlayer method)": [[40, "fortuna.prob_output_layer.regression.RegressionProbOutputLayer.variance"]], "array (in module fortuna.typing)": [[42, "fortuna.typing.Array"]], "batch (in module fortuna.typing)": [[42, "fortuna.typing.Batch"]], "calibmutable (in module fortuna.typing)": [[42, "fortuna.typing.CalibMutable"]], "calibparams (in module fortuna.typing)": [[42, "fortuna.typing.CalibParams"]], "mutable (in module fortuna.typing)": [[42, "fortuna.typing.Mutable"]], "optaxoptimizer (in module fortuna.typing)": [[42, "fortuna.typing.OptaxOptimizer"]], "params (in module fortuna.typing)": [[42, "fortuna.typing.Params"]], "path (in module fortuna.typing)": [[42, "fortuna.typing.Path"]], "status (in module fortuna.typing)": [[42, "fortuna.typing.Status"]], "randomnumbergenerator (class in fortuna.utils.random)": [[43, "fortuna.utils.random.RandomNumberGenerator"]], "get() (fortuna.utils.random.randomnumbergenerator method)": [[43, "fortuna.utils.random.RandomNumberGenerator.get"]]}})